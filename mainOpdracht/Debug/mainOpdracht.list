
mainOpdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a388  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a4  20000008  0800a670  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a40  200001ac  0800a814  000201ac  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001bec  0800a814  00021bec  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013eb9  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000036bb  00000000  00000000  00034095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015e8  00000000  00000000  00037750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001450  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024a74  00000000  00000000  0003a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014b7b  00000000  00000000  0005ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d5faf  00000000  00000000  00073777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00149726  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006010  00000000  00000000  00149778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ac 	.word	0x200001ac
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a4b0 	.word	0x0800a4b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b0 	.word	0x200001b0
 800017c:	0800a4b0 	.word	0x0800a4b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fb03 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f809 	bl	8000270 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800025e:	f000 f873 	bl	8000348 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000262:	f000 f88f 	bl	8000384 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000266:	f008 fc01 	bl	8008a6c <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Read_Rotary();
 800026a:	f000 f8e5 	bl	8000438 <Read_Rotary>
 800026e:	e7fc      	b.n	800026a <main+0x18>

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b09a      	sub	sp, #104	; 0x68
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	2248      	movs	r2, #72	; 0x48
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f009 f980 	bl	8009584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]
 8000294:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <SystemClock_Config+0xd4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800029e:	4a29      	ldr	r2, [pc, #164]	; (8000344 <SystemClock_Config+0xd4>)
 80002a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	4b27      	ldr	r3, [pc, #156]	; (8000344 <SystemClock_Config+0xd4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80002b2:	2326      	movs	r3, #38	; 0x26
 80002b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002b6:	2300      	movs	r3, #0
 80002b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2340      	movs	r3, #64	; 0x40
 80002c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002c8:	2300      	movs	r3, #0
 80002ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002cc:	2360      	movs	r3, #96	; 0x60
 80002ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d4:	2301      	movs	r3, #1
 80002d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002dc:	2320      	movs	r3, #32
 80002de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80002f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 feb8 	bl	800306c <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000302:	f000 f885 	bl	8000410 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000306:	236f      	movs	r3, #111	; 0x6f
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2103      	movs	r1, #3
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fa14 	bl	8003754 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000332:	f000 f86d 	bl	8000410 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000336:	f003 ffa5 	bl	8004284 <HAL_RCCEx_EnableMSIPLLMode>
}
 800033a:	bf00      	nop
 800033c:	3768      	adds	r7, #104	; 0x68
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	58000400 	.word	0x58000400

08000348 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b094      	sub	sp, #80	; 0x50
 800034c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2250      	movs	r2, #80	; 0x50
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f009 f915 	bl	8009584 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800035a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800035e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000360:	2300      	movs	r3, #0
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000364:	2310      	movs	r3, #16
 8000366:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fe14 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000376:	f000 f84b 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	; 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	2004      	movs	r0, #4
 800039a:	f7ff ff41 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff ff3e 	bl	8000220 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	2008      	movs	r0, #8
 80003a6:	f7ff ff3b 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b0:	4815      	ldr	r0, [pc, #84]	; (8000408 <MX_GPIO_Init+0x84>)
 80003b2:	f000 fd73 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	480e      	ldr	r0, [pc, #56]	; (8000408 <MX_GPIO_Init+0x84>)
 80003ce:	f000 fbdd 	bl	8000b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : POTMETER_Pin ROTARY1_Pin ROTARY2_Pin */
  GPIO_InitStruct.Pin = POTMETER_Pin|ROTARY1_Pin|ROTARY2_Pin;
 80003d2:	f641 0302 	movw	r3, #6146	; 0x1802
 80003d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4808      	ldr	r0, [pc, #32]	; (8000408 <MX_GPIO_Init+0x84>)
 80003e6:	f000 fbd1 	bl	8000b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTARY_SWITCH_Pin */
  GPIO_InitStruct.Pin = ROTARY_SWITCH_Pin;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROTARY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x88>)
 80003fc:	f000 fbc6 	bl	8000b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	48000800 	.word	0x48000800
 800040c:	48000c00 	.word	0x48000c00

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	e7fe      	b.n	8000418 <Error_Handler+0x8>

0800041a <_write>:

int clockState = 0;
int counterClockState = 0;

int _write(int file, char *ptr, int len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
  CDC_Transmit_FS((uint8_t *)ptr, len);
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	68b8      	ldr	r0, [r7, #8]
 800042a:	f008 fbdd 	bl	8008be8 <CDC_Transmit_FS>
  return len;
 800042e:	687b      	ldr	r3, [r7, #4]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <Read_Rotary>:

void Read_Rotary()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
    int valA = HAL_GPIO_ReadPin(ROTARY1_GPIO_Port, ROTARY1_Pin);
 800043e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000442:	4855      	ldr	r0, [pc, #340]	; (8000598 <Read_Rotary+0x160>)
 8000444:	f000 fd12 	bl	8000e6c <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	60fb      	str	r3, [r7, #12]
    int valB = HAL_GPIO_ReadPin(ROTARY2_GPIO_Port, ROTARY2_Pin);
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	4851      	ldr	r0, [pc, #324]	; (8000598 <Read_Rotary+0x160>)
 8000452:	f000 fd0b 	bl	8000e6c <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	60bb      	str	r3, [r7, #8]
    newVal = (valA << 1) + valB;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	005a      	lsls	r2, r3, #1
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4413      	add	r3, r2
 8000462:	4a4e      	ldr	r2, [pc, #312]	; (800059c <Read_Rotary+0x164>)
 8000464:	6013      	str	r3, [r2, #0]

    int info = lookupTable[prevVal][newVal];
 8000466:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <Read_Rotary+0x168>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b4c      	ldr	r3, [pc, #304]	; (800059c <Read_Rotary+0x164>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	494d      	ldr	r1, [pc, #308]	; (80005a4 <Read_Rotary+0x16c>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4413      	add	r3, r2
 8000474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000478:	607b      	str	r3, [r7, #4]

    if (info == 1)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d109      	bne.n	8000494 <Read_Rotary+0x5c>
    {
        clockState |= (1 << newVal);
 8000480:	4b46      	ldr	r3, [pc, #280]	; (800059c <Read_Rotary+0x164>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2201      	movs	r2, #1
 8000486:	409a      	lsls	r2, r3
 8000488:	4b47      	ldr	r3, [pc, #284]	; (80005a8 <Read_Rotary+0x170>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4313      	orrs	r3, r2
 800048e:	4a46      	ldr	r2, [pc, #280]	; (80005a8 <Read_Rotary+0x170>)
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e00c      	b.n	80004ae <Read_Rotary+0x76>
    }
    else if (info == -1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800049a:	d108      	bne.n	80004ae <Read_Rotary+0x76>
    {
        counterClockState |= (1 << newVal);
 800049c:	4b3f      	ldr	r3, [pc, #252]	; (800059c <Read_Rotary+0x164>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2201      	movs	r2, #1
 80004a2:	409a      	lsls	r2, r3
 80004a4:	4b41      	ldr	r3, [pc, #260]	; (80005ac <Read_Rotary+0x174>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	4a40      	ldr	r2, [pc, #256]	; (80005ac <Read_Rotary+0x174>)
 80004ac:	6013      	str	r3, [r2, #0]
    else if (info == 2)
    {
        // skipped a value
    }

    if (prevVal != newVal && newVal == 3)
 80004ae:	4b3c      	ldr	r3, [pc, #240]	; (80005a0 <Read_Rotary+0x168>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b3a      	ldr	r3, [pc, #232]	; (800059c <Read_Rotary+0x164>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d047      	beq.n	800054a <Read_Rotary+0x112>
 80004ba:	4b38      	ldr	r3, [pc, #224]	; (800059c <Read_Rotary+0x164>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d143      	bne.n	800054a <Read_Rotary+0x112>
    {
        if (clockState == 0b1011 || clockState == 0b1101 || clockState == 0b1110 || clockState == 0b1111)
 80004c2:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <Read_Rotary+0x170>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b0b      	cmp	r3, #11
 80004c8:	d00b      	beq.n	80004e2 <Read_Rotary+0xaa>
 80004ca:	4b37      	ldr	r3, [pc, #220]	; (80005a8 <Read_Rotary+0x170>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b0d      	cmp	r3, #13
 80004d0:	d007      	beq.n	80004e2 <Read_Rotary+0xaa>
 80004d2:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <Read_Rotary+0x170>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0e      	cmp	r3, #14
 80004d8:	d003      	beq.n	80004e2 <Read_Rotary+0xaa>
 80004da:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <Read_Rotary+0x170>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d10e      	bne.n	8000500 <Read_Rotary+0xc8>
        {
            readValue++; // clockwise
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <Read_Rotary+0x178>)
 80004e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	3301      	adds	r3, #1
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <Read_Rotary+0x178>)
 80004f2:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4827      	ldr	r0, [pc, #156]	; (8000598 <Read_Rotary+0x160>)
 80004fc:	f000 fcce 	bl	8000e9c <HAL_GPIO_WritePin>
        }
        if (counterClockState == 0b1011 || counterClockState == 0b1101 || counterClockState == 0b1110 || counterClockState == 0b1111)
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <Read_Rotary+0x174>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b0b      	cmp	r3, #11
 8000506:	d00b      	beq.n	8000520 <Read_Rotary+0xe8>
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <Read_Rotary+0x174>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b0d      	cmp	r3, #13
 800050e:	d007      	beq.n	8000520 <Read_Rotary+0xe8>
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <Read_Rotary+0x174>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b0e      	cmp	r3, #14
 8000516:	d003      	beq.n	8000520 <Read_Rotary+0xe8>
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <Read_Rotary+0x174>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d10e      	bne.n	800053e <Read_Rotary+0x106>
        {
            readValue--; // counterclockwise
 8000520:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <Read_Rotary+0x178>)
 8000522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000526:	b29b      	uxth	r3, r3
 8000528:	3b01      	subs	r3, #1
 800052a:	b29b      	uxth	r3, r3
 800052c:	b21a      	sxth	r2, r3
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Read_Rotary+0x178>)
 8000530:	801a      	strh	r2, [r3, #0]
            HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4817      	ldr	r0, [pc, #92]	; (8000598 <Read_Rotary+0x160>)
 800053a:	f000 fcaf 	bl	8000e9c <HAL_GPIO_WritePin>
        }
        clockState = 0;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <Read_Rotary+0x170>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
        counterClockState = 0;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <Read_Rotary+0x174>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
    }
    prevVal = newVal;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <Read_Rotary+0x164>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <Read_Rotary+0x168>)
 8000550:	6013      	str	r3, [r2, #0]

    if (iTimer > 15000)
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <Read_Rotary+0x17c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f643 2298 	movw	r2, #15000	; 0x3a98
 800055a:	4293      	cmp	r3, r2
 800055c:	dd09      	ble.n	8000572 <Read_Rotary+0x13a>
    {
        printf("De teller is: %d\r\n", readValue);
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <Read_Rotary+0x178>)
 8000560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000564:	4619      	mov	r1, r3
 8000566:	4814      	ldr	r0, [pc, #80]	; (80005b8 <Read_Rotary+0x180>)
 8000568:	f009 f814 	bl	8009594 <iprintf>
        iTimer = 0;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <Read_Rotary+0x17c>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
    }
    iTimer++;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <Read_Rotary+0x17c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <Read_Rotary+0x17c>)
 800057a:	6013      	str	r3, [r2, #0]

    if (!HAL_GPIO_ReadPin(ROTARY_SWITCH_GPIO_Port, ROTARY_SWITCH_Pin))
 800057c:	2101      	movs	r1, #1
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <Read_Rotary+0x184>)
 8000580:	f000 fc74 	bl	8000e6c <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d102      	bne.n	8000590 <Read_Rotary+0x158>
        {
          readValue = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <Read_Rotary+0x178>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
        }
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	48000800 	.word	0x48000800
 800059c:	200001d4 	.word	0x200001d4
 80005a0:	200001cc 	.word	0x200001cc
 80005a4:	20000008 	.word	0x20000008
 80005a8:	200001d8 	.word	0x200001d8
 80005ac:	200001dc 	.word	0x200001dc
 80005b0:	200001c8 	.word	0x200001c8
 80005b4:	200001d0 	.word	0x200001d0
 80005b8:	0800a4c8 	.word	0x0800a4c8
 80005bc:	48000c00 	.word	0x48000c00

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <NMI_Handler+0x4>

080005d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <HardFault_Handler+0x4>

080005da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <BusFault_Handler+0x4>

080005e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <UsageFault_Handler+0x4>

080005ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f97b 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <USB_LP_IRQHandler+0x10>)
 800062a:	f000 fd4a 	bl	80010c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200016c8 	.word	0x200016c8

08000638 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e00a      	b.n	8000660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800064a:	f3af 8000 	nop.w
 800064e:	4601      	mov	r1, r0
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	b2ca      	uxtb	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbf0      	blt.n	800064a <_read+0x12>
  }

  return len;
 8000668:	687b      	ldr	r3, [r7, #4]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069a:	605a      	str	r2, [r3, #4]
  return 0;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_isatty>:

int _isatty(int file)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f008 ff10 	bl	8009530 <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20030000 	.word	0x20030000
 800073c:	00000400 	.word	0x00000400
 8000740:	200001e0 	.word	0x200001e0
 8000744:	20001bf0 	.word	0x20001bf0

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SystemInit+0x98>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <SystemInit+0x98>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800075c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800076c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000770:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000774:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <SystemInit+0x9c>)
 8000782:	4013      	ands	r3, r2
 8000784:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800078e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000792:	f023 0305 	bic.w	r3, r3, #5
 8000796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <SystemInit+0xa0>)
 80007b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <SystemInit+0xa0>)
 80007bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00
 80007e4:	faf6fefb 	.word	0xfaf6fefb
 80007e8:	22041000 	.word	0x22041000

080007ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f0:	3304      	adds	r3, #4

080007f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80007f6:	d3f9      	bcc.n	80007ec <CopyDataInit>
  bx lr
 80007f8:	4770      	bx	lr

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80007fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80007fc:	3004      	adds	r0, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80007fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>
  bx lr
 8000802:	4770      	bx	lr

08000804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000808:	f7ff ff9e 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <LoopForever+0x6>)
 800080e:	490c      	ldr	r1, [pc, #48]	; (8000840 <LoopForever+0xa>)
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <LoopForever+0xe>)
 8000812:	2300      	movs	r3, #0
 8000814:	f7ff ffed 	bl	80007f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <LoopForever+0x12>)
 800081a:	490c      	ldr	r1, [pc, #48]	; (800084c <LoopForever+0x16>)
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <LoopForever+0x1a>)
 800081e:	2300      	movs	r3, #0
 8000820:	f7ff ffe7 	bl	80007f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopForever+0x1e>)
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <LoopForever+0x22>)
 8000828:	2300      	movs	r3, #0
 800082a:	f7ff ffe8 	bl	80007fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800082e:	f008 fe85 	bl	800953c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000832:	f7ff fd0e 	bl	8000252 <main>

08000836 <LoopForever>:

LoopForever:
  b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800083c:	20000008 	.word	0x20000008
 8000840:	200001ac 	.word	0x200001ac
 8000844:	0800a670 	.word	0x0800a670
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000848:	20030000 	.word	0x20030000
 800084c:	20030000 	.word	0x20030000
 8000850:	0800a814 	.word	0x0800a814
  INIT_BSS _sbss, _ebss
 8000854:	200001ac 	.word	0x200001ac
 8000858:	20001bec 	.word	0x20001bec

0800085c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_Init+0x3c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_Init+0x3c>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000876:	2003      	movs	r0, #3
 8000878:	f000 f948 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087c:	200f      	movs	r0, #15
 800087e:	f000 f80f 	bl	80008a0 <HAL_InitTick>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	e001      	b.n	8000892 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800088e:	f7ff fe97 	bl	80005c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000892:	79fb      	ldrb	r3, [r7, #7]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	58004000 	.word	0x58004000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_InitTick+0x6c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d024      	beq.n	80008fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b4:	f003 f8fc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80008b8:	4602      	mov	r2, r0
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_InitTick+0x6c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f950 	bl	8000b72 <HAL_SYSTICK_Config>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10f      	bne.n	80008f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d809      	bhi.n	80008f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	f04f 30ff 	mov.w	r0, #4294967295
 80008e6:	f000 f91c 	bl	8000b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <HAL_InitTick+0x70>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	e007      	b.n	8000902 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e004      	b.n	8000902 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e001      	b.n	8000902 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000050 	.word	0x20000050
 8000910:	2000004c 	.word	0x2000004c

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000050 	.word	0x20000050
 8000938:	200001e4 	.word	0x200001e4

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	200001e4 	.word	0x200001e4

08000954 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTickPrio+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000004c 	.word	0x2000004c

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b30:	f7ff ff40 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ff90 	bl	8000a60 <NVIC_EncodePriority>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5f 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff33 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffa4 	bl	8000ac8 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	e14c      	b.n	8000e36 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 813e 	beq.w	8000e30 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d005      	beq.n	8000bcc <HAL_GPIO_Init+0x40>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d130      	bne.n	8000c2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c02:	2201      	movs	r2, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	f003 0201 	and.w	r2, r3, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d017      	beq.n	8000c6a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d123      	bne.n	8000cbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	6939      	ldr	r1, [r7, #16]
 8000cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0203 	and.w	r2, r3, #3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8098 	beq.w	8000e30 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d00:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_GPIO_Init+0x2c8>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d2a:	d019      	beq.n	8000d60 <HAL_GPIO_Init+0x1d4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <HAL_GPIO_Init+0x2cc>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1d0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a49      	ldr	r2, [pc, #292]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1cc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a48      	ldr	r2, [pc, #288]	; (8000e60 <HAL_GPIO_Init+0x2d4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1c8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <HAL_GPIO_Init+0x2d8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1c4>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e008      	b.n	8000d62 <HAL_GPIO_Init+0x1d6>
 8000d50:	2307      	movs	r3, #7
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1d6>
 8000d54:	2303      	movs	r3, #3
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_Init+0x1d6>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x1d6>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_Init+0x1d6>
 8000d60:	2300      	movs	r3, #0
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	f002 0203 	and.w	r2, r2, #3
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d72:	4938      	ldr	r1, [pc, #224]	; (8000e54 <HAL_GPIO_Init+0x2c8>)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d80:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da4:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000daa:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dce:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_GPIO_Init+0x2dc>)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f47f aeab 	bne.w	8000b9c <HAL_GPIO_Init+0x10>
  }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010000 	.word	0x40010000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	48000c00 	.word	0x48000c00
 8000e64:	48001000 	.word	0x48001000
 8000e68:	58000800 	.word	0x58000800

08000e6c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af06      	add	r7, sp, #24
 8000ed2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0cb      	b.n	8001076 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f007 fff2 	bl	8008edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 faeb 	bl	80044e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e040      	b.n	8000f92 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3301      	adds	r3, #1
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	440b      	add	r3, r1
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3338      	adds	r3, #56	; 0x38
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	333c      	adds	r3, #60	; 0x3c
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3340      	adds	r3, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3b9      	bcc.n	8000f10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e044      	b.n	800102c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3b5      	bcc.n	8000fa2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	687e      	ldr	r6, [r7, #4]
 800103e:	466d      	mov	r5, sp
 8001040:	f106 0410 	add.w	r4, r6, #16
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	1d33      	adds	r3, r6, #4
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f003 fa60 	bl	8004516 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 fc45 	bl	80028fe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800107e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_PCD_Start+0x16>
 8001090:	2302      	movs	r3, #2
 8001092:	e012      	b.n	80010ba <HAL_PCD_Start+0x3c>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fa06 	bl	80044b2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fcc9 	bl	8006a42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 fcce 	bl	8006a70 <USB_ReadInterrupts>
 80010d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fb05 	bl	80016f0 <PCD_EP_ISR_Handler>

    return;
 80010e6:	e110      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d013      	beq.n	800111a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001104:	b292      	uxth	r2, r2
 8001106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f007 ff99 	bl	8009042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f8fc 	bl	8001310 <HAL_PCD_SetAddress>

    return;
 8001118:	e0f7      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00c      	beq.n	800113e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001136:	b292      	uxth	r2, r2
 8001138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800113c:	e0e5      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00c      	beq.n	8001162 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001160:	e0d3      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d034      	beq.n	80011d6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0204 	bic.w	r2, r2, #4
 800117e:	b292      	uxth	r2, r2
 8001180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800118c:	b29a      	uxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0208 	bic.w	r2, r2, #8
 8001196:	b292      	uxth	r2, r2
 8001198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d107      	bne.n	80011b6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011ae:	2100      	movs	r1, #0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f008 f93d 	bl	8009430 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f007 ff7c 	bl	80090b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011d4:	e099      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d027      	beq.n	8001230 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	b292      	uxth	r2, r2
 80011f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800120a:	b292      	uxth	r2, r2
 800120c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0204 	orr.w	r2, r2, #4
 8001222:	b292      	uxth	r2, r2
 8001224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f007 ff29 	bl	8009080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800122e:	e06c      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	2b00      	cmp	r3, #0
 8001238:	d040      	beq.n	80012bc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12b      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0204 	orr.w	r2, r2, #4
 800126e:	b292      	uxth	r2, r2
 8001270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0208 	orr.w	r2, r2, #8
 8001286:	b292      	uxth	r2, r2
 8001288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800129c:	b29b      	uxth	r3, r3
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012aa:	2101      	movs	r1, #1
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f008 f8bf 	bl	8009430 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80012b2:	e02a      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f007 fee3 	bl	8009080 <HAL_PCD_SuspendCallback>
    return;
 80012ba:	e026      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00f      	beq.n	80012e6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012d8:	b292      	uxth	r2, r2
 80012da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f007 fea1 	bl	8009026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012e4:	e011      	b.n	800130a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001302:	b292      	uxth	r2, r2
 8001304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001308:	bf00      	nop
  }
}
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_PCD_SetAddress+0x1a>
 8001326:	2302      	movs	r3, #2
 8001328:	e013      	b.n	8001352 <HAL_PCD_SetAddress+0x42>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fb69 	bl	8006a1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	4608      	mov	r0, r1
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	4603      	mov	r3, r0
 800136a:	70fb      	strb	r3, [r7, #3]
 800136c:	460b      	mov	r3, r1
 800136e:	803b      	strh	r3, [r7, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da0e      	bge.n	800139e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	705a      	strb	r2, [r3, #1]
 800139c:	e00e      	b.n	80013bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f003 0207 	and.w	r2, r3, #7
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013c8:	883a      	ldrh	r2, [r7, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	78ba      	ldrb	r2, [r7, #2]
 80013d2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013d4:	78bb      	ldrb	r3, [r7, #2]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d102      	bne.n	80013e0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_EP_Open+0x94>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e00e      	b.n	800140c <HAL_PCD_EP_Open+0xb2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f8ab 	bl	8004558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800140a:	7afb      	ldrb	r3, [r7, #11]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da0e      	bge.n	8001446 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	e00e      	b.n	8001464 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	f003 0207 	and.w	r2, r3, #7
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	b2da      	uxtb	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_PCD_EP_Close+0x6a>
 800147a:	2302      	movs	r3, #2
 800147c:	e00e      	b.n	800149c <HAL_PCD_EP_Close+0x88>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fc27 	bl	8004ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	460b      	mov	r3, r1
 80014b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	f003 0207 	and.w	r2, r3, #7
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2200      	movs	r2, #0
 80014e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e4:	7afb      	ldrb	r3, [r7, #11]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6979      	ldr	r1, [r7, #20]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fddf 	bl	80050ba <USB_EPStartXfer>

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0207 	and.w	r2, r3, #7
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001528:	681b      	ldr	r3, [r3, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2201      	movs	r2, #1
 8001580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	b2da      	uxtb	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fd90 	bl	80050ba <USB_EPStartXfer>

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	f003 0207 	and.w	r2, r3, #7
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d901      	bls.n	80015c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e03e      	b.n	8001640 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da0e      	bge.n	80015e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	705a      	strb	r2, [r3, #1]
 80015e6:	e00c      	b.n	8001602 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_PCD_EP_SetStall+0x7e>
 800161e:	2302      	movs	r3, #2
 8001620:	e00e      	b.n	8001640 <HAL_PCD_EP_SetStall+0x9c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4618      	mov	r0, r3
 8001632:	f005 f8f3 	bl	800681c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 020f 	and.w	r2, r3, #15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d901      	bls.n	8001666 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e040      	b.n	80016e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0e      	bge.n	800168c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	705a      	strb	r2, [r3, #1]
 800168a:	e00e      	b.n	80016aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 0207 	and.w	r2, r3, #7
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_PCD_EP_ClrStall+0x82>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e00e      	b.n	80016e8 <HAL_PCD_EP_ClrStall+0xa0>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68f9      	ldr	r1, [r7, #12]
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f8f0 	bl	80068be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016f8:	e3b1      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001702:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001714:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 8173 	bne.w	8001a04 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800171e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d150      	bne.n	80017cc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	81fb      	strh	r3, [r7, #14]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800174a:	b29b      	uxth	r3, r3
 800174c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3328      	adds	r3, #40	; 0x28
 8001752:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800175c:	b29b      	uxth	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4413      	add	r3, r2
 800176e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800177c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	441a      	add	r2, r3
 8001786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001788:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f007 fc30 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 835f 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 835a 	bne.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b292      	uxth	r2, r2
 80017be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017ca:	e348      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d032      	beq.n	8001850 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001810:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001822:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001824:	b29b      	uxth	r3, r3
 8001826:	f005 f975 	bl	8006b14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29a      	uxth	r2, r3
 8001832:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001836:	4013      	ands	r3, r2
 8001838:	823b      	strh	r3, [r7, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	8a3a      	ldrh	r2, [r7, #16]
 8001840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001844:	b292      	uxth	r2, r2
 8001846:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 fba5 	bl	8008f98 <HAL_PCD_SetupStageCallback>
 800184e:	e306      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001850:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001854:	2b00      	cmp	r3, #0
 8001856:	f280 8302 	bge.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001866:	4013      	ands	r3, r2
 8001868:	83fb      	strh	r3, [r7, #30]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	8bfa      	ldrh	r2, [r7, #30]
 8001870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001874:	b292      	uxth	r2, r2
 8001876:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4413      	add	r3, r2
 8001892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800189c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1ec>
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b6:	6959      	ldr	r1, [r3, #20]
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f005 f927 	bl	8006b14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f007 fb70 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 82b5 	bne.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
 80018f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80018fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001900:	f000 82ad 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4413      	add	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800192e:	b29a      	uxth	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	801a      	strh	r2, [r3, #0]
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b3e      	cmp	r3, #62	; 0x3e
 800193a:	d91d      	bls.n	8001978 <PCD_EP_ISR_Handler+0x288>
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <PCD_EP_ISR_Handler+0x266>
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	3b01      	subs	r3, #1
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29a      	uxth	r2, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	b29b      	uxth	r3, r3
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	b29b      	uxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b29b      	uxth	r3, r3
 8001968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001970:	b29a      	uxth	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	801a      	strh	r2, [r3, #0]
 8001976:	e026      	b.n	80019c6 <PCD_EP_ISR_Handler+0x2d6>
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <PCD_EP_ISR_Handler+0x2a6>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800198a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800198e:	b29a      	uxth	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	e017      	b.n	80019c6 <PCD_EP_ISR_Handler+0x2d6>
 8001996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <PCD_EP_ISR_Handler+0x2c0>
 80019aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ac:	3301      	adds	r3, #1
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	029b      	lsls	r3, r3, #10
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d6:	827b      	strh	r3, [r7, #18]
 80019d8:	8a7b      	ldrh	r3, [r7, #18]
 80019da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019de:	827b      	strh	r3, [r7, #18]
 80019e0:	8a7b      	ldrh	r3, [r7, #18]
 80019e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019e6:	827b      	strh	r3, [r7, #18]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	8a7b      	ldrh	r3, [r7, #18]
 80019ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	8013      	strh	r3, [r2, #0]
 8001a02:	e22c      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a18:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f280 80f6 	bge.w	8001c0e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a38:	4013      	ands	r3, r2
 8001a3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a54:	b292      	uxth	r2, r2
 8001a56:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a58:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a70:	7b1b      	ldrb	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d123      	bne.n	8001abe <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 808e 	beq.w	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aae:	6959      	ldr	r1, [r3, #20]
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	88da      	ldrh	r2, [r3, #6]
 8001ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ab8:	f005 f82c 	bl	8006b14 <USB_ReadPMA>
 8001abc:	e082      	b.n	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d10a      	bne.n	8001adc <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aca:	461a      	mov	r2, r3
 8001acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9d3 	bl	8001e7a <HAL_PCD_EP_DB_Receive>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001ada:	e073      	b.n	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	441a      	add	r2, r3
 8001b08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d022      	beq.n	8001b80 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d02c      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	6959      	ldr	r1, [r3, #20]
 8001b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b74:	891a      	ldrh	r2, [r3, #8]
 8001b76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b7a:	f004 ffcb 	bl	8006b14 <USB_ReadPMA>
 8001b7e:	e021      	b.n	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ba8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	6959      	ldr	r1, [r3, #20]
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bba:	895a      	ldrh	r2, [r3, #10]
 8001bbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc0:	f004 ffa8 	bl	8006b14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bcc:	441a      	add	r2, r3
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bda:	441a      	add	r2, r3
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bde:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <PCD_EP_ISR_Handler+0x504>
 8001be8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d206      	bcs.n	8001c02 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f007 f9de 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8001c00:	e005      	b.n	8001c0e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fa56 	bl	80050ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8121 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	441a      	add	r2, r3
 8001c5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	f040 80a2 	bne.w	8001dba <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8093 	beq.w	8001dac <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d046      	beq.n	8001d20 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d126      	bne.n	8001ce8 <PCD_EP_ISR_Handler+0x5f8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4413      	add	r3, r2
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	00da      	lsls	r2, r3, #3
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	4413      	add	r3, r2
 8001cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e061      	b.n	8001dac <PCD_EP_ISR_Handler+0x6bc>
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d15d      	bne.n	8001dac <PCD_EP_ISR_Handler+0x6bc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	4413      	add	r3, r2
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	00da      	lsls	r2, r3, #3
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	4413      	add	r3, r2
 8001d12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	e045      	b.n	8001dac <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d126      	bne.n	8001d7c <PCD_EP_ISR_Handler+0x68c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	4413      	add	r3, r2
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	00da      	lsls	r2, r3, #3
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e017      	b.n	8001dac <PCD_EP_ISR_Handler+0x6bc>
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d113      	bne.n	8001dac <PCD_EP_ISR_Handler+0x6bc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	4413      	add	r3, r2
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	00da      	lsls	r2, r3, #3
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9e:	4413      	add	r3, r2
 8001da0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f007 f91d 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
 8001db8:	e051      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d144      	bne.n	8001e50 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d907      	bls.n	8001e0a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	e002      	b.n	8001e10 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f007 f8e7 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
 8001e24:	e01b      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e2e:	441a      	add	r2, r3
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e3c:	441a      	add	r2, r3
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f936 	bl	80050ba <USB_EPStartXfer>
 8001e4e:	e006      	b.n	8001e5e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e54:	461a      	mov	r2, r3
 8001e56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f917 	bl	800208c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f6ff ac45 	blt.w	80016fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3758      	adds	r7, #88	; 0x58
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b088      	sub	sp, #32
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d07c      	beq.n	8001f8c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	8b7b      	ldrh	r3, [r7, #26]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d306      	bcc.n	8001ed0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	8b7b      	ldrh	r3, [r7, #26]
 8001ec8:	1ad2      	subs	r2, r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	e002      	b.n	8001ed6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d123      	bne.n	8001f26 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef8:	833b      	strh	r3, [r7, #24]
 8001efa:	8b3b      	ldrh	r3, [r7, #24]
 8001efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f00:	833b      	strh	r3, [r7, #24]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	441a      	add	r2, r3
 8001f10:	8b3b      	ldrh	r3, [r7, #24]
 8001f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01f      	beq.n	8001f70 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	82fb      	strh	r3, [r7, #22]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	8afb      	ldrh	r3, [r7, #22]
 8001f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f70:	8b7b      	ldrh	r3, [r7, #26]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8085 	beq.w	8002082 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	6959      	ldr	r1, [r3, #20]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	891a      	ldrh	r2, [r3, #8]
 8001f84:	8b7b      	ldrh	r3, [r7, #26]
 8001f86:	f004 fdc5 	bl	8006b14 <USB_ReadPMA>
 8001f8a:	e07a      	b.n	8002082 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	8b7b      	ldrh	r3, [r7, #26]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d306      	bcc.n	8001fca <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	8b7b      	ldrh	r3, [r7, #26]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	619a      	str	r2, [r3, #24]
 8001fc8:	e002      	b.n	8001fd0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d123      	bne.n	8002020 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	83fb      	strh	r3, [r7, #30]
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ffa:	83fb      	strh	r3, [r7, #30]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11f      	bne.n	800206a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	83bb      	strh	r3, [r7, #28]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	441a      	add	r2, r3
 8002054:	8bbb      	ldrh	r3, [r7, #28]
 8002056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800206a:	8b7b      	ldrh	r3, [r7, #26]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6959      	ldr	r1, [r3, #20]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	895a      	ldrh	r2, [r3, #10]
 800207c:	8b7b      	ldrh	r3, [r7, #26]
 800207e:	f004 fd49 	bl	8006b14 <USB_ReadPMA>
    }
  }

  return count;
 8002082:	8b7b      	ldrh	r3, [r7, #26]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0a4      	sub	sp, #144	; 0x90
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 81db 	beq.w	800245c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d907      	bls.n	80020ea <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	619a      	str	r2, [r3, #24]
 80020e8:	e002      	b.n	80020f0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 80b9 	bne.w	800226c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d126      	bne.n	8002150 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002110:	b29b      	uxth	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	4413      	add	r3, r2
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	00da      	lsls	r2, r3, #3
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	4413      	add	r3, r2
 8002124:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002134:	b29a      	uxth	r2, r3
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002148:	b29a      	uxth	r2, r3
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	e01a      	b.n	8002186 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d116      	bne.n	8002186 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	4413      	add	r3, r2
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00da      	lsls	r2, r3, #3
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	4413      	add	r3, r2
 800217a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d126      	bne.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00da      	lsls	r2, r3, #3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021da:	b29a      	uxth	r2, r3
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	e017      	b.n	8002212 <HAL_PCD_EP_DB_Transmit+0x186>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d113      	bne.n	8002212 <HAL_PCD_EP_DB_Transmit+0x186>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	4413      	add	r3, r2
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	00da      	lsls	r2, r3, #3
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	4413      	add	r3, r2
 8002206:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f006 feea 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 82fa 	beq.w	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002244:	82fb      	strh	r3, [r7, #22]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800225a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002266:	b29b      	uxth	r3, r3
 8002268:	8013      	strh	r3, [r2, #0]
 800226a:	e2d8      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d021      	beq.n	80022ba <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002290:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f040 82ac 	bne.w	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022ce:	441a      	add	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022dc:	441a      	add	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d30b      	bcc.n	8002306 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022fe:	1ad2      	subs	r2, r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	621a      	str	r2, [r3, #32]
 8002304:	e017      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800230e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800231e:	e00a      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d165      	bne.n	800240a <HAL_PCD_EP_DB_Transmit+0x37e>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002352:	4413      	add	r3, r2
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00da      	lsls	r2, r3, #3
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	4413      	add	r3, r2
 8002360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002364:	63bb      	str	r3, [r7, #56]	; 0x38
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002370:	b29a      	uxth	r2, r3
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237a:	2b3e      	cmp	r3, #62	; 0x3e
 800237c:	d91d      	bls.n	80023ba <HAL_PCD_EP_DB_Transmit+0x32e>
 800237e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	64bb      	str	r3, [r7, #72]	; 0x48
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002394:	3b01      	subs	r3, #1
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29a      	uxth	r2, r3
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	e044      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x34c>
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	e035      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x366>
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	3301      	adds	r3, #1
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b29a      	uxth	r2, r3
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e01c      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d118      	bne.n	8002444 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002426:	4413      	add	r3, r2
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00da      	lsls	r2, r3, #3
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	4413      	add	r3, r2
 8002434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
 800243a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243e:	b29a      	uxth	r2, r3
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	891a      	ldrh	r2, [r3, #8]
 8002450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002454:	b29b      	uxth	r3, r3
 8002456:	f004 fb1b 	bl	8006a90 <USB_WritePMA>
 800245a:	e1e0      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4413      	add	r3, r2
 8002476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002480:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800248c:	429a      	cmp	r2, r3
 800248e:	d307      	bcc.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	619a      	str	r2, [r3, #24]
 800249e:	e002      	b.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 80c0 	bne.w	8002630 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d126      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x47a>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024cc:	4413      	add	r3, r2
 80024ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00da      	lsls	r2, r3, #3
 80024d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024d8:	4413      	add	r3, r2
 80024da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024de:	67bb      	str	r3, [r7, #120]	; 0x78
 80024e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e01a      	b.n	800253c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d116      	bne.n	800253c <HAL_PCD_EP_DB_Transmit+0x4b0>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002522:	4413      	add	r3, r2
 8002524:	667b      	str	r3, [r7, #100]	; 0x64
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00da      	lsls	r2, r3, #3
 800252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800252e:	4413      	add	r3, r2
 8002530:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002534:	663b      	str	r3, [r7, #96]	; 0x60
 8002536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002538:	2200      	movs	r2, #0
 800253a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	677b      	str	r3, [r7, #116]	; 0x74
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d12b      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x516>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	4413      	add	r3, r2
 8002560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00da      	lsls	r2, r3, #3
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	4413      	add	r3, r2
 800256c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002580:	b29a      	uxth	r2, r3
 8002582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002598:	b29a      	uxth	r2, r3
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e017      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x546>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d113      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x546>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b8:	4413      	add	r3, r2
 80025ba:	677b      	str	r3, [r7, #116]	; 0x74
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ca:	673b      	str	r3, [r7, #112]	; 0x70
 80025cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f006 fd0a 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 811a 	bne.w	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
 800262e:	e0f6      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 80ca 	bne.w	800281e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002692:	441a      	add	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026a0:	441a      	add	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6a1a      	ldr	r2, [r3, #32]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d30b      	bcc.n	80026ca <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	e017      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80026d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026e2:	e00a      	b.n	80026fa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d165      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x748>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271c:	4413      	add	r3, r2
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	00da      	lsls	r2, r3, #3
 8002726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002728:	4413      	add	r3, r2
 800272a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800272e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	b29a      	uxth	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002744:	2b3e      	cmp	r3, #62	; 0x3e
 8002746:	d91d      	bls.n	8002784 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800275c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275e:	3b01      	subs	r3, #1
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
 8002762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29a      	uxth	r2, r3
 8002768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800276a:	b29b      	uxth	r3, r3
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	b29b      	uxth	r3, r3
 8002770:	4313      	orrs	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277c:	b29a      	uxth	r2, r3
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	e041      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x716>
 800278c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279a:	b29a      	uxth	r2, r3
 800279c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e032      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_PCD_EP_DB_Transmit+0x730>
 80027b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b8:	3301      	adds	r3, #1
 80027ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80027bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e019      	b.n	8002808 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d115      	bne.n	8002808 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	4413      	add	r3, r2
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00da      	lsls	r2, r3, #3
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002802:	b29a      	uxth	r2, r3
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6959      	ldr	r1, [r3, #20]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	895a      	ldrh	r2, [r3, #10]
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	b29b      	uxth	r3, r3
 800281a:	f004 f939 	bl	8006a90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002838:	82bb      	strh	r3, [r7, #20]
 800283a:	8abb      	ldrh	r3, [r7, #20]
 800283c:	f083 0310 	eor.w	r3, r3, #16
 8002840:	82bb      	strh	r3, [r7, #20]
 8002842:	8abb      	ldrh	r3, [r7, #20]
 8002844:	f083 0320 	eor.w	r3, r3, #32
 8002848:	82bb      	strh	r3, [r7, #20]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	8abb      	ldrh	r3, [r7, #20]
 800285a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	b29b      	uxth	r3, r3
 800286c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3790      	adds	r7, #144	; 0x90
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	4613      	mov	r3, r2
 8002888:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e009      	b.n	80028c2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ae:	897a      	ldrh	r2, [r7, #10]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028c2:	893b      	ldrh	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2200      	movs	r2, #0
 80028cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	80da      	strh	r2, [r3, #6]
 80028d6:	e00b      	b.n	80028f0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2201      	movs	r2, #1
 80028dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002922:	b29b      	uxth	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002936:	b29b      	uxth	r3, r3
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	58000400 	.word	0x58000400

08002974 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_PWREx_GetVoltageRange+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	58000400 	.word	0x58000400

08002990 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800299a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299e:	6053      	str	r3, [r2, #4]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	58000400 	.word	0x58000400

080029b0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c2:	d101      	bne.n	80029c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a22:	d101      	bne.n	8002a28 <LL_RCC_HSE_IsReady+0x18>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <LL_RCC_HSE_IsReady+0x1a>
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d101      	bne.n	8002a88 <LL_RCC_HSI_IsReady+0x18>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_RCC_HSI_IsReady+0x1a>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d101      	bne.n	8002b1a <LL_RCC_HSI48_IsReady+0x18>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_RCC_HSI48_IsReady+0x1a>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d101      	bne.n	8002bc6 <LL_RCC_LSE_IsReady+0x18>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <LL_RCC_LSE_IsReady+0x1a>
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d101      	bne.n	8002c2e <LL_RCC_LSI1_IsReady+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_RCC_LSI1_IsReady+0x1a>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d101      	bne.n	8002c96 <LL_RCC_LSI2_IsReady+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_RCC_LSI2_IsReady+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6013      	str	r3, [r2, #0]
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d101      	bne.n	8002d22 <LL_RCC_MSI_IsReady+0x16>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_RCC_MSI_IsReady+0x18>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d66:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d6c:	d901      	bls.n	8002d72 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002d6e:	23b0      	movs	r3, #176	; 0xb0
 8002d70:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002d72:	687b      	ldr	r3, [r7, #4]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 0203 	bic.w	r2, r3, #3
 8002dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e4e:	f023 020f 	bic.w	r2, r3, #15
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f20:	6013      	str	r3, [r2, #0]
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3e:	d101      	bne.n	8002f44 <LL_RCC_PLL_IsReady+0x18>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <LL_RCC_PLL_IsReady+0x1a>
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d101      	bne.n	8002fca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fea:	d101      	bne.n	8002ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d101      	bne.n	8003016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003034:	d101      	bne.n	800303a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003058:	d101      	bne.n	800305e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b08d      	sub	sp, #52	; 0x34
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e363      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808d 	beq.w	80031a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308c:	f7ff fea1 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 8003090:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003092:	f7ff ff82 	bl	8002f9a <LL_RCC_PLL_GetMainSource>
 8003096:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x3e>
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d147      	bne.n	8003134 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d144      	bne.n	8003134 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e347      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030ba:	f7ff fe4c 	bl	8002d56 <LL_RCC_MSI_GetRange>
 80030be:	4603      	mov	r3, r0
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d914      	bls.n	80030ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fd05 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e336      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe26 	bl	8002d2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe4a 	bl	8002d80 <LL_RCC_MSI_SetCalibTrimming>
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe1b 	bl	8002d2e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fe3f 	bl	8002d80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fce6 	bl	8003ad8 <RCC_SetFlashLatencyFromMSIRange>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e317      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003116:	f000 fccb 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 800311a:	4603      	mov	r3, r0
 800311c:	4aa4      	ldr	r2, [pc, #656]	; (80033b0 <HAL_RCC_OscConfig+0x344>)
 800311e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003120:	4ba4      	ldr	r3, [pc, #656]	; (80033b4 <HAL_RCC_OscConfig+0x348>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fbbb 	bl	80008a0 <HAL_InitTick>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d039      	beq.n	80031a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e308      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01e      	beq.n	800317a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800313c:	f7ff fdc8 	bl	8002cd0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003140:	f7fd fbfc 	bl	800093c <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003148:	f7fd fbf8 	bl	800093c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e2f5      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800315a:	f7ff fdd7 	bl	8002d0c <LL_RCC_MSI_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f1      	beq.n	8003148 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fde0 	bl	8002d2e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe04 	bl	8002d80 <LL_RCC_MSI_SetCalibTrimming>
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800317a:	f7ff fdb8 	bl	8002cee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317e:	f7fd fbdd 	bl	800093c <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003186:	f7fd fbd9 	bl	800093c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e2d6      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003198:	f7ff fdb8 	bl	8002d0c <LL_RCC_MSI_IsReady>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f1      	bne.n	8003186 <HAL_RCC_OscConfig+0x11a>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d047      	beq.n	8003242 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	f7ff fe0e 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 80031b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b8:	f7ff feef 	bl	8002f9a <LL_RCC_PLL_GetMainSource>
 80031bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_OscConfig+0x164>
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d108      	bne.n	80031dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d134      	bne.n	8003242 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e2b4      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0x180>
 80031e6:	f7ff fbf5 	bl	80029d4 <LL_RCC_HSE_Enable>
 80031ea:	e001      	b.n	80031f0 <HAL_RCC_OscConfig+0x184>
 80031ec:	f7ff fc01 	bl	80029f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd fba0 	bl	800093c <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7fd fb9c 	bl	800093c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e299      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003212:	f7ff fbfd 	bl	8002a10 <LL_RCC_HSE_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f1      	beq.n	8003200 <HAL_RCC_OscConfig+0x194>
 800321c:	e011      	b.n	8003242 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd fb8d 	bl	800093c <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003226:	f7fd fb89 	bl	800093c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	; 0x64
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e286      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003238:	f7ff fbea 	bl	8002a10 <LL_RCC_HSE_IsReady>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f1      	bne.n	8003226 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324e:	f7ff fdc0 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 8003252:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	f7ff fea1 	bl	8002f9a <LL_RCC_PLL_GetMainSource>
 8003258:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d005      	beq.n	800326c <HAL_RCC_OscConfig+0x200>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d10e      	bne.n	8003284 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d10b      	bne.n	8003284 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e266      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fc09 	bl	8002a94 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003282:	e031      	b.n	80032e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d019      	beq.n	80032c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	f7ff fbd2 	bl	8002a34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd fb54 	bl	800093c <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fd fb50 	bl	800093c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e24d      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032aa:	f7ff fbe1 	bl	8002a70 <LL_RCC_HSI_IsReady>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f1      	beq.n	8003298 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fbeb 	bl	8002a94 <LL_RCC_HSI_SetCalibTrimming>
 80032be:	e013      	b.n	80032e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c0:	f7ff fbc7 	bl	8002a52 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fb3a 	bl	800093c <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fd fb36 	bl	800093c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e233      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032de:	f7ff fbc7 	bl	8002a70 <LL_RCC_HSI_IsReady>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f1      	bne.n	80032cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a3 	beq.w	8003448 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d076      	beq.n	80033f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d046      	beq.n	80033a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003316:	f7ff fc7e 	bl	8002c16 <LL_RCC_LSI1_IsReady>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d113      	bne.n	8003348 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003320:	f7ff fc57 	bl	8002bd2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003324:	f7fd fb0a 	bl	800093c <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800332c:	f7fd fb06 	bl	800093c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e203      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800333e:	f7ff fc6a 	bl	8002c16 <LL_RCC_LSI1_IsReady>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f1      	beq.n	800332c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003348:	f7ff fc77 	bl	8002c3a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd faf6 	bl	800093c <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003354:	f7fd faf2 	bl	800093c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1ef      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003366:	f7ff fc8a 	bl	8002c7e <LL_RCC_LSI2_IsReady>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f1      	beq.n	8003354 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fc94 	bl	8002ca2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800337a:	f7ff fc3b 	bl	8002bf4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fd fadd 	bl	800093c <HAL_GetTick>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003386:	f7fd fad9 	bl	800093c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1d6      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003398:	f7ff fc3d 	bl	8002c16 <LL_RCC_LSI1_IsReady>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f1      	bne.n	8003386 <HAL_RCC_OscConfig+0x31a>
 80033a2:	e051      	b.n	8003448 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033a4:	f7ff fc15 	bl	8002bd2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fac8 	bl	800093c <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033ae:	e00c      	b.n	80033ca <HAL_RCC_OscConfig+0x35e>
 80033b0:	20000048 	.word	0x20000048
 80033b4:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033b8:	f7fd fac0 	bl	800093c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1bd      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033ca:	f7ff fc24 	bl	8002c16 <LL_RCC_LSI1_IsReady>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f1      	beq.n	80033b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033d4:	f7ff fc42 	bl	8002c5c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033da:	f7fd faaf 	bl	800093c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1ac      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033ec:	f7ff fc47 	bl	8002c7e <LL_RCC_LSI2_IsReady>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f1      	bne.n	80033da <HAL_RCC_OscConfig+0x36e>
 80033f6:	e027      	b.n	8003448 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033f8:	f7ff fc30 	bl	8002c5c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fd fa9e 	bl	800093c <HAL_GetTick>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003404:	f7fd fa9a 	bl	800093c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e197      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003416:	f7ff fc32 	bl	8002c7e <LL_RCC_LSI2_IsReady>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f1      	bne.n	8003404 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003420:	f7ff fbe8 	bl	8002bf4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fd fa8a 	bl	800093c <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800342c:	f7fd fa86 	bl	800093c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e183      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800343e:	f7ff fbea 	bl	8002c16 <LL_RCC_LSI1_IsReady>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f1      	bne.n	800342c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05b      	beq.n	800350c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003454:	4ba7      	ldr	r3, [pc, #668]	; (80036f4 <HAL_RCC_OscConfig+0x688>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d114      	bne.n	800348a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003460:	f7ff fa78 	bl	8002954 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003464:	f7fd fa6a 	bl	800093c <HAL_GetTick>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fd fa66 	bl	800093c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e163      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	4b9d      	ldr	r3, [pc, #628]	; (80036f4 <HAL_RCC_OscConfig+0x688>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_RCC_OscConfig+0x42c>
 8003492:	f7ff fb48 	bl	8002b26 <LL_RCC_LSE_Enable>
 8003496:	e00c      	b.n	80034b2 <HAL_RCC_OscConfig+0x446>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d104      	bne.n	80034aa <HAL_RCC_OscConfig+0x43e>
 80034a0:	f7ff fb63 	bl	8002b6a <LL_RCC_LSE_EnableBypass>
 80034a4:	f7ff fb3f 	bl	8002b26 <LL_RCC_LSE_Enable>
 80034a8:	e003      	b.n	80034b2 <HAL_RCC_OscConfig+0x446>
 80034aa:	f7ff fb4d 	bl	8002b48 <LL_RCC_LSE_Disable>
 80034ae:	f7ff fb6d 	bl	8002b8c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fa3f 	bl	800093c <HAL_GetTick>
 80034be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fa3b 	bl	800093c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e136      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d8:	f7ff fb69 	bl	8002bae <LL_RCC_LSE_IsReady>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ef      	beq.n	80034c2 <HAL_RCC_OscConfig+0x456>
 80034e2:	e013      	b.n	800350c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fd fa2a 	bl	800093c <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fd fa26 	bl	800093c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e121      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003502:	f7ff fb54 	bl	8002bae <LL_RCC_LSE_IsReady>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ef      	bne.n	80034ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02c      	beq.n	8003572 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d014      	beq.n	800354a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003520:	f7ff facd 	bl	8002abe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fa0a 	bl	800093c <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800352c:	f7fd fa06 	bl	800093c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e103      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800353e:	f7ff fae0 	bl	8002b02 <LL_RCC_HSI48_IsReady>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f1      	beq.n	800352c <HAL_RCC_OscConfig+0x4c0>
 8003548:	e013      	b.n	8003572 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800354a:	f7ff fac9 	bl	8002ae0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fd f9f5 	bl	800093c <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003556:	f7fd f9f1 	bl	800093c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0ee      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003568:	f7ff facb 	bl	8002b02 <LL_RCC_HSI48_IsReady>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f1      	bne.n	8003556 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80e4 	beq.w	8003744 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357c:	f7ff fc29 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 8003580:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2b02      	cmp	r3, #2
 8003590:	f040 80b4 	bne.w	80036fc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	429a      	cmp	r2, r3
 80035a0:	d123      	bne.n	80035ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d11c      	bne.n	80035ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d114      	bne.n	80035ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10d      	bne.n	80035ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d05d      	beq.n	80036a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d058      	beq.n	80036a2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0a1      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003602:	f7ff fc84 	bl	8002f0e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003606:	f7fd f999 	bl	800093c <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd f995 	bl	800093c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e092      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ef      	bne.n	800360e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_OscConfig+0x68c>)
 8003636:	4013      	ands	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003646:	0212      	lsls	r2, r2, #8
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800365a:	430a      	orrs	r2, r1
 800365c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003664:	f7ff fc44 	bl	8002ef0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fd f960 	bl	800093c <HAL_GetTick>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd f95c 	bl	800093c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e059      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a0:	e050      	b.n	8003744 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e04f      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d147      	bne.n	8003744 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b4:	f7ff fc1c 	bl	8002ef0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fd f938 	bl	800093c <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd f934 	bl	800093c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e031      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ef      	beq.n	80036d0 <HAL_RCC_OscConfig+0x664>
 80036f0:	e028      	b.n	8003744 <HAL_RCC_OscConfig+0x6d8>
 80036f2:	bf00      	nop
 80036f4:	58000400 	.word	0x58000400
 80036f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d01e      	beq.n	8003740 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	f7ff fc04 	bl	8002f0e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd f919 	bl	800093c <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd f915 	bl	800093c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e012      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_OscConfig+0x6e4>)
 800373a:	4013      	ands	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
 800373e:	e001      	b.n	8003744 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3734      	adds	r7, #52	; 0x34
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	eefefffc 	.word	0xeefefffc

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e12d      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b98      	ldr	r3, [pc, #608]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d91b      	bls.n	80037ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b95      	ldr	r3, [pc, #596]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4993      	ldr	r1, [pc, #588]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd f8d9 	bl	800093c <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800378e:	f7fd f8d5 	bl	800093c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e111      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a0:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1ef      	bne.n	800378e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fb13 	bl	8002dea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037c4:	f7fd f8ba 	bl	800093c <HAL_GetTick>
 80037c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037cc:	f7fd f8b6 	bl	800093c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0f2      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037de:	f7ff fbe8 	bl	8002fb2 <LL_RCC_IsActiveFlag_HPRE>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f1      	beq.n	80037cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d016      	beq.n	8003822 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fb0a 	bl	8002e12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037fe:	f7fd f89d 	bl	800093c <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003806:	f7fd f899 	bl	800093c <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0d5      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003818:	f7ff fbdd 	bl	8002fd6 <LL_RCC_IsActiveFlag_C2HPRE>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f1      	beq.n	8003806 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fb03 	bl	8002e3e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003838:	f7fd f880 	bl	800093c <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003840:	f7fd f87c 	bl	800093c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b8      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003852:	f7ff fbd3 	bl	8002ffc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f1      	beq.n	8003840 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fafd 	bl	8002e6c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003872:	f7fd f863 	bl	800093c <HAL_GetTick>
 8003876:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800387a:	f7fd f85f 	bl	800093c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e09b      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800388c:	f7ff fbc9 	bl	8003022 <LL_RCC_IsActiveFlag_PPRE1>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f1      	beq.n	800387a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d017      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff faf3 	bl	8002e94 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038ae:	f7fd f845 	bl	800093c <HAL_GetTick>
 80038b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038b6:	f7fd f841 	bl	800093c <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e07d      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038c8:	f7ff fbbd 	bl	8003046 <LL_RCC_IsActiveFlag_PPRE2>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f1      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d043      	beq.n	8003966 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d106      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038e6:	f7ff f893 	bl	8002a10 <LL_RCC_HSE_IsReady>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11e      	bne.n	800392e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e067      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d106      	bne.n	800390a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038fc:	f7ff fb16 	bl	8002f2c <LL_RCC_PLL_IsReady>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d113      	bne.n	800392e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e05c      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003912:	f7ff f9fb 	bl	8002d0c <LL_RCC_MSI_IsReady>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e051      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003920:	f7ff f8a6 	bl	8002a70 <LL_RCC_HSI_IsReady>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e04a      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fa39 	bl	8002daa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd f800 	bl	800093c <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fc fffc 	bl	800093c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e036      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	f7ff fa3c 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	429a      	cmp	r2, r3
 8003964:	d1ec      	bne.n	8003940 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003966:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d21b      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 0207 	bic.w	r2, r3, #7
 800397c:	4913      	ldr	r1, [pc, #76]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003984:	f7fc ffda 	bl	800093c <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	e008      	b.n	800399e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800398c:	f7fc ffd6 	bl	800093c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e012      	b.n	80039c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x278>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1ef      	bne.n	800398c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039ac:	f000 f880 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <HAL_RCC_ClockConfig+0x27c>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039b6:	f7fc ffcd 	bl	8000954 <HAL_GetTickPrio>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc ff6f 	bl	80008a0 <HAL_InitTick>
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58004000 	.word	0x58004000
 80039d0:	20000048 	.word	0x20000048

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	f7ff f9fa 	bl	8002dd2 <LL_RCC_GetSysClkSource>
 80039de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039e6:	f7ff f9b6 	bl	8002d56 <LL_RCC_MSI_GetRange>
 80039ea:	4603      	mov	r3, r0
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e04b      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a02:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e045      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d10a      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a0e:	f7fe ffcf 	bl	80029b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e03a      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e037      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a24:	f7ff fab9 	bl	8002f9a <LL_RCC_PLL_GetMainSource>
 8003a28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x64>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x6a>
 8003a36:	e00d      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a3a:	60bb      	str	r3, [r7, #8]
        break;
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a3e:	f7fe ffb7 	bl	80029b0 <LL_RCC_HSE_IsEnabledDiv2>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a4a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a4c:	e00d      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a50:	60bb      	str	r3, [r7, #8]
        break;
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a54:	f7ff f97f 	bl	8002d56 <LL_RCC_MSI_GetRange>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	60bb      	str	r3, [r7, #8]
        break;
 8003a68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003a6a:	f7ff fa71 	bl	8002f50 <LL_RCC_PLL_GetN>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	fb03 f402 	mul.w	r4, r3, r2
 8003a76:	f7ff fa84 	bl	8002f82 <LL_RCC_PLL_GetDivider>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	3301      	adds	r3, #1
 8003a80:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a84:	f7ff fa71 	bl	8002f6a <LL_RCC_PLL_GetR>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	0f5b      	lsrs	r3, r3, #29
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a92:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800a590 	.word	0x0800a590
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	003d0900 	.word	0x003d0900
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b598      	push	{r3, r4, r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ab4:	f7ff ff8e 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	f7ff f9ff 	bl	8002ebc <LL_RCC_GetAHBPrescaler>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd98      	pop	{r3, r4, r7, pc}
 8003ad4:	0800a550 	.word	0x0800a550

08003ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8003ae4:	d903      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e007      	b.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003afe:	f7ff f9e9 	bl	8002ed4 <LL_RCC_GetAHB4Prescaler>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9c      	lsrs	r4, r3, #18
 8003b22:	f7fe ff27 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f000 f80c 	bl	8003b48 <RCC_SetFlashLatency>
 8003b30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	0800a590 	.word	0x0800a590
 8003b40:	0800a550 	.word	0x0800a550
 8003b44:	431bde83 	.word	0x431bde83

08003b48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b093      	sub	sp, #76	; 0x4c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <RCC_SetFlashLatency+0xe8>)
 8003b54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b5e:	4a35      	ldr	r2, [pc, #212]	; (8003c34 <RCC_SetFlashLatency+0xec>)
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b6a:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <RCC_SetFlashLatency+0xf0>)
 8003b6c:	f107 040c 	add.w	r4, r7, #12
 8003b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b76:	2300      	movs	r3, #0
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d11a      	bne.n	8003bb8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	643b      	str	r3, [r7, #64]	; 0x40
 8003b86:	e013      	b.n	8003bb0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	3348      	adds	r3, #72	; 0x48
 8003b8e:	443b      	add	r3, r7
 8003b90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d807      	bhi.n	8003baa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	3348      	adds	r3, #72	; 0x48
 8003ba0:	443b      	add	r3, r7
 8003ba2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ba6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ba8:	e020      	b.n	8003bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bac:	3301      	adds	r3, #1
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d9e8      	bls.n	8003b88 <RCC_SetFlashLatency+0x40>
 8003bb6:	e019      	b.n	8003bec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbc:	e013      	b.n	8003be6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3348      	adds	r3, #72	; 0x48
 8003bc4:	443b      	add	r3, r7
 8003bc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d807      	bhi.n	8003be0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3348      	adds	r3, #72	; 0x48
 8003bd6:	443b      	add	r3, r7
 8003bd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bde:	e005      	b.n	8003bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	3301      	adds	r3, #1
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d9e8      	bls.n	8003bbe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <RCC_SetFlashLatency+0xf4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 0207 	bic.w	r2, r3, #7
 8003bf4:	4911      	ldr	r1, [pc, #68]	; (8003c3c <RCC_SetFlashLatency+0xf4>)
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bfc:	f7fc fe9e 	bl	800093c <HAL_GetTick>
 8003c00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c02:	e008      	b.n	8003c16 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c04:	f7fc fe9a 	bl	800093c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e007      	b.n	8003c26 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <RCC_SetFlashLatency+0xf4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1ef      	bne.n	8003c04 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	374c      	adds	r7, #76	; 0x4c
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	0800a4dc 	.word	0x0800a4dc
 8003c34:	0800a4ec 	.word	0x0800a4ec
 8003c38:	0800a4f8 	.word	0x0800a4f8
 8003c3c:	58004000 	.word	0x58004000

08003c40 <LL_RCC_LSE_IsEnabled>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <LL_RCC_LSE_IsEnabled+0x18>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <LL_RCC_LSE_IsEnabled+0x1a>
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_LSE_IsReady>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d101      	bne.n	8003c7c <LL_RCC_LSE_IsReady+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_RCC_LSE_IsReady+0x1a>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_MSI_EnablePLLMode>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_SetRFWKPClockSource>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_SetSMPSClockSource>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_SetSMPSPrescaler>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_SetUSARTClockSource>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_SetLPUARTClockSource>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_SetI2CClockSource>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d92:	43db      	mvns	r3, r3
 8003d94:	401a      	ands	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_SetLPTIMClockSource>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_SetSAIClockSource>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_RCC_SetRNGClockSource>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_RCC_SetCLK48ClockSource>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_SetUSBClockSource>:
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ffe3 	bl	8003e40 <LL_RCC_SetCLK48ClockSource>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <LL_RCC_SetADCClockSource>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_RCC_SetRTCClockSource>:
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_RCC_GetRTCClockSource>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_ForceBackupDomainReset>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_PLLSAI1_Enable>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_PLLSAI1_Disable>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f68:	6013      	str	r3, [r2, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f86:	d101      	bne.n	8003f8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d034      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fbc:	d021      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fc2:	d81b      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc8:	d01d      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fce:	d815      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd8:	d110      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fea:	e00d      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f94d 	bl	8004290 <RCCEx_PLLSAI1_ConfigNP>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ffa:	e005      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8004000:	e002      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fee8 	bl	8003de8 <LL_RCC_SetSAIClockSource>
 8004018:	e001      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401a:	7ffb      	ldrb	r3, [r7, #31]
 800401c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	d046      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800402a:	f7ff ff56 	bl	8003eda <LL_RCC_GetRTCClockSource>
 800402e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	429a      	cmp	r2, r3
 8004038:	d03c      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800403a:	f7fe fc8b 	bl	8002954 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff30 	bl	8003eae <LL_RCC_SetRTCClockSource>
 800404e:	e02e      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800405a:	f7ff ff4b 	bl	8003ef4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800405e:	f7ff ff5a 	bl	8003f16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800407a:	f7ff fde1 	bl	8003c40 <LL_RCC_LSE_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d114      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004084:	f7fc fc5a 	bl	800093c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fc fc56 	bl	800093c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	77fb      	strb	r3, [r7, #31]
              break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040a4:	f7ff fdde 	bl	8003c64 <LL_RCC_LSE_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d1ee      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	77bb      	strb	r3, [r7, #30]
 80040b2:	e001      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fe2a 	bl	8003d22 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fe35 	bl	8003d4e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fe5d 	bl	8003db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe52 	bl	8003db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fe2a 	bl	8003d7a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fe1f 	bl	8003d7a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe8d 	bl	8003e6c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d107      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800416a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f8e3 	bl	8004346 <RCCEx_PLLSAI1_ConfigNQ>
 8004180:	4603      	mov	r3, r0
 8004182:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004184:	7ffb      	ldrb	r3, [r7, #31]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fe2a 	bl	8003e14 <LL_RCC_SetRNGClockSource>
 80041c0:	e00a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7ff fe21 	bl	8003e14 <LL_RCC_SetRNGClockSource>
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff fe34 	bl	8003e40 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80041e0:	d107      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d022      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe3d 	bl	8003e82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004210:	d107      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422a:	d10b      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f8e3 	bl	80043fc <RCCEx_PLLSAI1_ConfigNR>
 8004236:	4603      	mov	r3, r0
 8004238:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800423a:	7ffb      	ldrb	r3, [r7, #31]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004240:	7ffb      	ldrb	r3, [r7, #31]
 8004242:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fd26 	bl	8003ca6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fd45 	bl	8003cfa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fd2c 	bl	8003cd2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800427a:	7fbb      	ldrb	r3, [r7, #30]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004288:	f7ff fcfe 	bl	8003c88 <LL_RCC_MSI_EnablePLLMode>
}
 800428c:	bf00      	nop
 800428e:	bd80      	pop	{r7, pc}

08004290 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800429c:	f7ff fe5b 	bl	8003f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042a0:	f7fc fb4c 	bl	800093c <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a8:	f7fc fb48 	bl	800093c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ba:	e004      	b.n	80042c6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042bc:	f7ff fe5a 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d137      	bne.n	800433c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e0:	4313      	orrs	r3, r2
 80042e2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042fa:	f7ff fe1d 	bl	8003f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fc fb1d 	bl	800093c <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004304:	e009      	b.n	800431a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004306:	f7fc fb19 	bl	800093c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	73fb      	strb	r3, [r7, #15]
        break;
 8004318:	e004      	b.n	8004324 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800431a:	f7ff fe2b 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d1f0      	bne.n	8004306 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004352:	f7ff fe00 	bl	8003f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004356:	f7fc faf1 	bl	800093c <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800435c:	e009      	b.n	8004372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800435e:	f7fc faed 	bl	800093c <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d902      	bls.n	8004372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e004      	b.n	800437c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004372:	f7ff fdff 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d137      	bne.n	80043f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ac:	4313      	orrs	r3, r2
 80043ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043b0:	f7ff fdc2 	bl	8003f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fc fac2 	bl	800093c <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ba:	e009      	b.n	80043d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043bc:	f7fc fabe 	bl	800093c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d902      	bls.n	80043d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	73fb      	strb	r3, [r7, #15]
        break;
 80043ce:	e004      	b.n	80043da <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d0:	f7ff fdd0 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d1f0      	bne.n	80043bc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d108      	bne.n	80043f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ee:	4313      	orrs	r3, r2
 80043f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004408:	f7ff fda5 	bl	8003f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800440c:	f7fc fa96 	bl	800093c <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004412:	e009      	b.n	8004428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004414:	f7fc fa92 	bl	800093c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d902      	bls.n	8004428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	73fb      	strb	r3, [r7, #15]
      break;
 8004426:	e004      	b.n	8004432 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004428:	f7ff fda4 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d137      	bne.n	80044a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004466:	f7ff fd67 	bl	8003f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc fa67 	bl	800093c <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004470:	e009      	b.n	8004486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004472:	f7fc fa63 	bl	800093c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d902      	bls.n	8004486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	73fb      	strb	r3, [r7, #15]
        break;
 8004484:	e004      	b.n	8004490 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004486:	f7ff fd75 	bl	8003f74 <LL_RCC_PLLSAI1_IsReady>
 800448a:	4603      	mov	r3, r0
 800448c:	2b01      	cmp	r3, #1
 800448e:	d1f0      	bne.n	8004472 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a4:	4313      	orrs	r3, r2
 80044a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80044c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80044ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4013      	ands	r3, r2
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004516:	b084      	sub	sp, #16
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	f107 0014 	add.w	r0, r7, #20
 8004524:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	b004      	add	sp, #16
 8004556:	4770      	bx	lr

08004558 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b09d      	sub	sp, #116	; 0x74
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	78db      	ldrb	r3, [r3, #3]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d81f      	bhi.n	80045ca <USB_ActivateEndpoint+0x72>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <USB_ActivateEndpoint+0x38>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045d3 	.word	0x080045d3
 800459c:	080045af 	.word	0x080045af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045ac:	e012      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045ba:	e00b      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045c8:	e004      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045d0:	e000      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>
      break;
 80045d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	b21b      	sxth	r3, r3
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	b21a      	sxth	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b21b      	sxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b21b      	sxth	r3, r3
 800461a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8178 	bne.w	800493a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8084 	beq.w	800475c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	00da      	lsls	r2, r3, #3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	88db      	ldrh	r3, [r3, #6]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	b29b      	uxth	r3, r3
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	827b      	strh	r3, [r7, #18]
 8004696:	8a7b      	ldrh	r3, [r7, #18]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <USB_ActivateEndpoint+0x180>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	823b      	strh	r3, [r7, #16]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	8a3b      	ldrh	r3, [r7, #16]
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	78db      	ldrb	r3, [r3, #3]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d020      	beq.n	8004722 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	81bb      	strh	r3, [r7, #12]
 80046f8:	89bb      	ldrh	r3, [r7, #12]
 80046fa:	f083 0320 	eor.w	r3, r3, #32
 80046fe:	81bb      	strh	r3, [r7, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	89bb      	ldrh	r3, [r7, #12]
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
 8004720:	e2d5      	b.n	8004cce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	81fb      	strh	r3, [r7, #14]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	89fb      	ldrh	r3, [r7, #14]
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
 800475a:	e2b8      	b.n	8004cce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	4413      	add	r3, r2
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	00da      	lsls	r2, r3, #3
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	4413      	add	r3, r2
 800477a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	88db      	ldrh	r3, [r3, #6]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	b29b      	uxth	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	4413      	add	r3, r2
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	00da      	lsls	r2, r3, #3
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	4413      	add	r3, r2
 80047ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047be:	b29a      	uxth	r2, r3
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ca:	d91d      	bls.n	8004808 <USB_ActivateEndpoint+0x2b0>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <USB_ActivateEndpoint+0x28e>
 80047e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047e2:	3b01      	subs	r3, #1
 80047e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	029b      	lsls	r3, r3, #10
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4313      	orrs	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004800:	b29a      	uxth	r2, r3
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e026      	b.n	8004856 <USB_ActivateEndpoint+0x2fe>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <USB_ActivateEndpoint+0x2ce>
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e017      	b.n	8004856 <USB_ActivateEndpoint+0x2fe>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	66bb      	str	r3, [r7, #104]	; 0x68
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <USB_ActivateEndpoint+0x2e8>
 800483a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483c:	3301      	adds	r3, #1
 800483e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29a      	uxth	r2, r3
 8004846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29b      	uxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	b29a      	uxth	r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	847b      	strh	r3, [r7, #34]	; 0x22
 8004864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01b      	beq.n	80048a6 <USB_ActivateEndpoint+0x34e>
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004884:	843b      	strh	r3, [r7, #32]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8c3b      	ldrh	r3, [r7, #32]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d124      	bne.n	80048f8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	83bb      	strh	r3, [r7, #28]
 80048c6:	8bbb      	ldrh	r3, [r7, #28]
 80048c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048cc:	83bb      	strh	r3, [r7, #28]
 80048ce:	8bbb      	ldrh	r3, [r7, #28]
 80048d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048d4:	83bb      	strh	r3, [r7, #28]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	8bbb      	ldrh	r3, [r7, #28]
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
 80048f6:	e1ea      	b.n	8004cce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	83fb      	strh	r3, [r7, #30]
 8004910:	8bfb      	ldrh	r3, [r7, #30]
 8004912:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004916:	83fb      	strh	r3, [r7, #30]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	8bfb      	ldrh	r3, [r7, #30]
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]
 8004938:	e1c9      	b.n	8004cce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	78db      	ldrb	r3, [r3, #3]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d11e      	bne.n	8004980 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	4413      	add	r3, r2
 80049ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00da      	lsls	r2, r3, #3
 80049d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049de:	65bb      	str	r3, [r7, #88]	; 0x58
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	891b      	ldrh	r3, [r3, #8]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a00:	4413      	add	r3, r2
 8004a02:	657b      	str	r3, [r7, #84]	; 0x54
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	00da      	lsls	r2, r3, #3
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	895b      	ldrh	r3, [r3, #10]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 8093 	bne.w	8004b54 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01b      	beq.n	8004a82 <USB_ActivateEndpoint+0x52a>
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01b      	beq.n	8004ad2 <USB_ActivateEndpoint+0x57a>
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004aea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004aec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004af0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004af2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004af4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004af8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b30:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
 8004b52:	e0bc      	b.n	8004cce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <USB_ActivateEndpoint+0x654>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01d      	beq.n	8004c04 <USB_ActivateEndpoint+0x6ac>
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d024      	beq.n	8004c56 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c2a:	f083 0320 	eor.w	r3, r3, #32
 8004c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	8013      	strh	r3, [r2, #0]
 8004c54:	e01d      	b.n	8004c92 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3774      	adds	r7, #116	; 0x74
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b08d      	sub	sp, #52	; 0x34
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	7b1b      	ldrb	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 808e 	bne.w	8004e10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d044      	beq.n	8004d86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	81bb      	strh	r3, [r7, #12]
 8004d0a:	89bb      	ldrh	r3, [r7, #12]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <USB_DeactivateEndpoint+0x6c>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	817b      	strh	r3, [r7, #10]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	813b      	strh	r3, [r7, #8]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	893b      	ldrh	r3, [r7, #8]
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
 8004d84:	e192      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	827b      	strh	r3, [r7, #18]
 8004d94:	8a7b      	ldrh	r3, [r7, #18]
 8004d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <USB_DeactivateEndpoint+0xf6>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	823b      	strh	r3, [r7, #16]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8a3b      	ldrh	r3, [r7, #16]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	81fb      	strh	r3, [r7, #14]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
 8004e0e:	e14d      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 80a5 	bne.w	8004f64 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	843b      	strh	r3, [r7, #32]
 8004e28:	8c3b      	ldrh	r3, [r7, #32]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01b      	beq.n	8004e6a <USB_DeactivateEndpoint+0x18a>
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	83fb      	strh	r3, [r7, #30]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8bfb      	ldrh	r3, [r7, #30]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	83bb      	strh	r3, [r7, #28]
 8004e78:	8bbb      	ldrh	r3, [r7, #28]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01b      	beq.n	8004eba <USB_DeactivateEndpoint+0x1da>
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	837b      	strh	r3, [r7, #26]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	441a      	add	r2, r3
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	833b      	strh	r3, [r7, #24]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8b3b      	ldrh	r3, [r7, #24]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	82fb      	strh	r3, [r7, #22]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8afb      	ldrh	r3, [r7, #22]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	82bb      	strh	r3, [r7, #20]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	8abb      	ldrh	r3, [r7, #20]
 8004f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8013      	strh	r3, [r2, #0]
 8004f62:	e0a3      	b.n	80050ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <USB_DeactivateEndpoint+0x2d4>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <USB_DeactivateEndpoint+0x324>
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	847b      	strh	r3, [r7, #34]	; 0x22
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3734      	adds	r7, #52	; 0x34
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b0c2      	sub	sp, #264	; 0x108
 80050be:	af00      	add	r7, sp, #0
 80050c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050c8:	6018      	str	r0, [r3, #0]
 80050ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	f040 86b7 	bne.w	8005e54 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d908      	bls.n	8005114 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005112:	e007      	b.n	8005124 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	7b1b      	ldrb	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d13a      	bne.n	80051aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6959      	ldr	r1, [r3, #20]
 8005140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	88da      	ldrh	r2, [r3, #6]
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005150:	b29b      	uxth	r3, r3
 8005152:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005156:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	f001 fc98 	bl	8006a90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	00da      	lsls	r2, r3, #3
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	f000 be1f 	b.w	8005de8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	f040 8462 	bne.w	8005a80 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f240 83df 	bls.w	8005998 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81c7 	beq.w	800560a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800527c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d177      	bne.n	8005388 <USB_EPStartXfer+0x2ce>
 8005298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	4413      	add	r3, r2
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	00da      	lsls	r2, r3, #3
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052de:	b29a      	uxth	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ea:	d921      	bls.n	8005330 <USB_EPStartXfer+0x276>
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <USB_EPStartXfer+0x252>
 8005302:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005306:	3b01      	subs	r3, #1
 8005308:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29a      	uxth	r2, r3
 8005312:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005328:	b29a      	uxth	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e050      	b.n	80053d2 <USB_EPStartXfer+0x318>
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <USB_EPStartXfer+0x294>
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005346:	b29a      	uxth	r2, r3
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e041      	b.n	80053d2 <USB_EPStartXfer+0x318>
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <USB_EPStartXfer+0x2b4>
 8005364:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005368:	3301      	adds	r3, #1
 800536a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005378:	b29b      	uxth	r3, r3
 800537a:	029b      	lsls	r3, r3, #10
 800537c:	b29b      	uxth	r3, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	b29a      	uxth	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e024      	b.n	80053d2 <USB_EPStartXfer+0x318>
 8005388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d11c      	bne.n	80053d2 <USB_EPStartXfer+0x318>
 8005398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	4413      	add	r3, r2
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	00da      	lsls	r2, r3, #3
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	895b      	ldrh	r3, [r3, #10]
 80053de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6959      	ldr	r1, [r3, #20]
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005400:	6800      	ldr	r0, [r0, #0]
 8005402:	f001 fb45 	bl	8006a90 <USB_WritePMA>
            ep->xfer_buff += len;
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005416:	441a      	add	r2, r3
 8005418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	d90f      	bls.n	8005460 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005450:	1ad2      	subs	r2, r2, r3
 8005452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	621a      	str	r2, [r3, #32]
 800545e:	e00e      	b.n	800547e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d177      	bne.n	800557e <USB_EPStartXfer+0x4c4>
 800548e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4413      	add	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054de:	2b3e      	cmp	r3, #62	; 0x3e
 80054e0:	d921      	bls.n	8005526 <USB_EPStartXfer+0x46c>
 80054e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <USB_EPStartXfer+0x448>
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550c:	b29b      	uxth	r3, r3
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	b29b      	uxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551e:	b29a      	uxth	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e056      	b.n	80055d4 <USB_EPStartXfer+0x51a>
 8005526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <USB_EPStartXfer+0x48a>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553c:	b29a      	uxth	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e047      	b.n	80055d4 <USB_EPStartXfer+0x51a>
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <USB_EPStartXfer+0x4aa>
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555e:	3301      	adds	r3, #1
 8005560:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	b29b      	uxth	r3, r3
 8005570:	029b      	lsls	r3, r3, #10
 8005572:	b29b      	uxth	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b29a      	uxth	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e02a      	b.n	80055d4 <USB_EPStartXfer+0x51a>
 800557e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d122      	bne.n	80055d4 <USB_EPStartXfer+0x51a>
 800558e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	4413      	add	r3, r2
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	00da      	lsls	r2, r3, #3
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	4413      	add	r3, r2
 80055c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	891b      	ldrh	r3, [r3, #8]
 80055e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6959      	ldr	r1, [r3, #20]
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005602:	6800      	ldr	r0, [r0, #0]
 8005604:	f001 fa44 	bl	8006a90 <USB_WritePMA>
 8005608:	e3ee      	b.n	8005de8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800560a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d177      	bne.n	800570a <USB_EPStartXfer+0x650>
 800561a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	64bb      	str	r3, [r7, #72]	; 0x48
 8005626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	4413      	add	r3, r2
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	4413      	add	r3, r2
 8005650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005654:	647b      	str	r3, [r7, #68]	; 0x44
 8005656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005660:	b29a      	uxth	r2, r3
 8005662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566a:	2b3e      	cmp	r3, #62	; 0x3e
 800566c:	d921      	bls.n	80056b2 <USB_EPStartXfer+0x5f8>
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <USB_EPStartXfer+0x5d4>
 8005684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005688:	3b01      	subs	r3, #1
 800568a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29a      	uxth	r2, r3
 8005694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005698:	b29b      	uxth	r3, r3
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	b29b      	uxth	r3, r3
 800569e:	4313      	orrs	r3, r2
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e056      	b.n	8005760 <USB_EPStartXfer+0x6a6>
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <USB_EPStartXfer+0x616>
 80056ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	e047      	b.n	8005760 <USB_EPStartXfer+0x6a6>
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <USB_EPStartXfer+0x636>
 80056e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ea:	3301      	adds	r3, #1
 80056ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4313      	orrs	r3, r2
 8005702:	b29a      	uxth	r2, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e02a      	b.n	8005760 <USB_EPStartXfer+0x6a6>
 800570a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d122      	bne.n	8005760 <USB_EPStartXfer+0x6a6>
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	653b      	str	r3, [r7, #80]	; 0x50
 8005726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800573a:	4413      	add	r3, r2
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	00da      	lsls	r2, r3, #3
 800574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574e:	4413      	add	r3, r2
 8005750:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575a:	b29a      	uxth	r2, r3
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	891b      	ldrh	r3, [r3, #8]
 800576c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6959      	ldr	r1, [r3, #20]
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005780:	b29b      	uxth	r3, r3
 8005782:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005786:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800578a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	f001 f97e 	bl	8006a90 <USB_WritePMA>
            ep->xfer_buff += len;
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a4:	441a      	add	r2, r3
 80057a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90f      	bls.n	80057ee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6a1a      	ldr	r2, [r3, #32]
 80057da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	621a      	str	r2, [r3, #32]
 80057ec:	e00e      	b.n	800580c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80057fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2200      	movs	r2, #0
 800580a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	643b      	str	r3, [r7, #64]	; 0x40
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d177      	bne.n	8005918 <USB_EPStartXfer+0x85e>
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	4413      	add	r3, r2
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	00da      	lsls	r2, r3, #3
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	4413      	add	r3, r2
 800585e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800586e:	b29a      	uxth	r2, r3
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	2b3e      	cmp	r3, #62	; 0x3e
 800587a:	d921      	bls.n	80058c0 <USB_EPStartXfer+0x806>
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <USB_EPStartXfer+0x7e2>
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	3b01      	subs	r3, #1
 8005898:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e050      	b.n	8005962 <USB_EPStartXfer+0x8a8>
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <USB_EPStartXfer+0x824>
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e041      	b.n	8005962 <USB_EPStartXfer+0x8a8>
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0x844>
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29a      	uxth	r2, r3
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	b29b      	uxth	r3, r3
 800590a:	029b      	lsls	r3, r3, #10
 800590c:	b29b      	uxth	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	b29a      	uxth	r2, r3
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e024      	b.n	8005962 <USB_EPStartXfer+0x8a8>
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d11c      	bne.n	8005962 <USB_EPStartXfer+0x8a8>
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593c:	4413      	add	r3, r2
 800593e:	643b      	str	r3, [r7, #64]	; 0x40
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	4413      	add	r3, r2
 8005952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595c:	b29a      	uxth	r2, r3
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	895b      	ldrh	r3, [r3, #10]
 800596e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6959      	ldr	r1, [r3, #20]
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005982:	b29b      	uxth	r3, r3
 8005984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005988:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800598c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005990:	6800      	ldr	r0, [r0, #0]
 8005992:	f001 f87d 	bl	8006a90 <USB_WritePMA>
 8005996:	e227      	b.n	8005de8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a24:	4413      	add	r3, r2
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	00da      	lsls	r2, r3, #3
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	4413      	add	r3, r2
 8005a3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	891b      	ldrh	r3, [r3, #8]
 8005a56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6959      	ldr	r1, [r3, #20]
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a78:	6800      	ldr	r0, [r0, #0]
 8005a7a:	f001 f809 	bl	8006a90 <USB_WritePMA>
 8005a7e:	e1b3      	b.n	8005de8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80c6 	beq.w	8005c52 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d177      	bne.n	8005bd2 <USB_EPStartXfer+0xb18>
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b02:	4413      	add	r3, r2
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	00da      	lsls	r2, r3, #3
 8005b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	2b3e      	cmp	r3, #62	; 0x3e
 8005b34:	d921      	bls.n	8005b7a <USB_EPStartXfer+0xac0>
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <USB_EPStartXfer+0xa9c>
 8005b4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b50:	3b01      	subs	r3, #1
 8005b52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	029b      	lsls	r3, r3, #10
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4313      	orrs	r3, r2
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e050      	b.n	8005c1c <USB_EPStartXfer+0xb62>
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <USB_EPStartXfer+0xade>
 8005b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e041      	b.n	8005c1c <USB_EPStartXfer+0xb62>
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <USB_EPStartXfer+0xafe>
 8005bae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e024      	b.n	8005c1c <USB_EPStartXfer+0xb62>
 8005bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d11c      	bne.n	8005c1c <USB_EPStartXfer+0xb62>
 8005be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf6:	4413      	add	r3, r2
 8005bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	895b      	ldrh	r3, [r3, #10]
 8005c28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6959      	ldr	r1, [r3, #20]
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	f000 ff20 	bl	8006a90 <USB_WritePMA>
 8005c50:	e0ca      	b.n	8005de8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d177      	bne.n	8005d52 <USB_EPStartXfer+0xc98>
 8005c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c82:	4413      	add	r3, r2
 8005c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	00da      	lsls	r2, r3, #3
 8005c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d921      	bls.n	8005cfa <USB_EPStartXfer+0xc40>
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <USB_EPStartXfer+0xc1c>
 8005ccc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e05c      	b.n	8005db4 <USB_EPStartXfer+0xcfa>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <USB_EPStartXfer+0xc5e>
 8005d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e04d      	b.n	8005db4 <USB_EPStartXfer+0xcfa>
 8005d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <USB_EPStartXfer+0xc7e>
 8005d2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d32:	3301      	adds	r3, #1
 8005d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	e030      	b.n	8005db4 <USB_EPStartXfer+0xcfa>
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d128      	bne.n	8005db4 <USB_EPStartXfer+0xcfa>
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d86:	4413      	add	r3, r2
 8005d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	00da      	lsls	r2, r3, #3
 8005d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005db2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	891b      	ldrh	r3, [r3, #8]
 8005dc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6959      	ldr	r1, [r3, #20]
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005dde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005de2:	6800      	ldr	r0, [r0, #0]
 8005de4:	f000 fe54 	bl	8006a90 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	817b      	strh	r3, [r7, #10]
 8005e10:	897b      	ldrh	r3, [r7, #10]
 8005e12:	f083 0310 	eor.w	r3, r3, #16
 8005e16:	817b      	strh	r3, [r7, #10]
 8005e18:	897b      	ldrh	r3, [r7, #10]
 8005e1a:	f083 0320 	eor.w	r3, r3, #32
 8005e1e:	817b      	strh	r3, [r7, #10]
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	897b      	ldrh	r3, [r7, #10]
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
 8005e50:	f000 bcde 	b.w	8006810 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	7b1b      	ldrb	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 80bb 	bne.w	8005fdc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d917      	bls.n	8005eb2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea2:	1ad2      	subs	r2, r2, r3
 8005ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	619a      	str	r2, [r3, #24]
 8005eb0:	e00e      	b.n	8005ed0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	00da      	lsls	r2, r3, #3
 8005f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f30:	d924      	bls.n	8005f7c <USB_EPStartXfer+0xec2>
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USB_EPStartXfer+0xe98>
 8005f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	029b      	lsls	r3, r3, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	f000 bc10 	b.w	800679c <USB_EPStartXfer+0x16e2>
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10c      	bne.n	8005f9e <USB_EPStartXfer+0xee4>
 8005f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	e3fe      	b.n	800679c <USB_EPStartXfer+0x16e2>
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <USB_EPStartXfer+0xf04>
 8005fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e3df      	b.n	800679c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f040 8218 	bne.w	800641e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 809d 	bne.w	800613a <USB_EPStartXfer+0x1080>
 8006000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006024:	4413      	add	r3, r2
 8006026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	00da      	lsls	r2, r3, #3
 8006038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603c:	4413      	add	r3, r2
 800603e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b3e      	cmp	r3, #62	; 0x3e
 8006068:	d92b      	bls.n	80060c2 <USB_EPStartXfer+0x1008>
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USB_EPStartXfer+0xfe0>
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006094:	3b01      	subs	r3, #1
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800609a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e070      	b.n	80061a4 <USB_EPStartXfer+0x10ea>
 80060c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10c      	bne.n	80060ec <USB_EPStartXfer+0x1032>
 80060d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	e05b      	b.n	80061a4 <USB_EPStartXfer+0x10ea>
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <USB_EPStartXfer+0x1062>
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	3301      	adds	r3, #1
 8006118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800611c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29a      	uxth	r2, r3
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	b29b      	uxth	r3, r3
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	b29b      	uxth	r3, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e034      	b.n	80061a4 <USB_EPStartXfer+0x10ea>
 800613a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d12c      	bne.n	80061a4 <USB_EPStartXfer+0x10ea>
 800614a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800616e:	4413      	add	r3, r2
 8006170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	00da      	lsls	r2, r3, #3
 8006182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006186:	4413      	add	r3, r2
 8006188:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800618c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	b29a      	uxth	r2, r3
 800619e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 809d 	bne.w	80062fe <USB_EPStartXfer+0x1244>
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e8:	4413      	add	r3, r2
 80061ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00da      	lsls	r2, r3, #3
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006200:	4413      	add	r3, r2
 8006202:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006206:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800620a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b3e      	cmp	r3, #62	; 0x3e
 800622c:	d92b      	bls.n	8006286 <USB_EPStartXfer+0x11cc>
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <USB_EPStartXfer+0x11a4>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	3b01      	subs	r3, #1
 800625a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800625e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626a:	b29b      	uxth	r3, r3
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	b29b      	uxth	r3, r3
 8006270:	4313      	orrs	r3, r2
 8006272:	b29b      	uxth	r3, r3
 8006274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e069      	b.n	800635a <USB_EPStartXfer+0x12a0>
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <USB_EPStartXfer+0x11f6>
 8006296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	e054      	b.n	800635a <USB_EPStartXfer+0x12a0>
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <USB_EPStartXfer+0x1226>
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	3301      	adds	r3, #1
 80062dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e02d      	b.n	800635a <USB_EPStartXfer+0x12a0>
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d125      	bne.n	800635a <USB_EPStartXfer+0x12a0>
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006324:	4413      	add	r3, r2
 8006326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	00da      	lsls	r2, r3, #3
 8006338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800633c:	4413      	add	r3, r2
 800633e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006358:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8218 	beq.w	800679c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800638c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <USB_EPStartXfer+0x12ea>
 8006398:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10d      	bne.n	80063c0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 81f5 	bne.w	800679c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 81ee 	bne.w	800679c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]
 800641c:	e1be      	b.n	800679c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b01      	cmp	r3, #1
 800642c:	f040 81b4 	bne.w	8006798 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d917      	bls.n	800647c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	619a      	str	r2, [r3, #24]
 800647a:	e00e      	b.n	800649a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 8085 	bne.w	80065b6 <USB_EPStartXfer+0x14fc>
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d0:	4413      	add	r3, r2
 80064d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00da      	lsls	r2, r3, #3
 80064e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650a:	2b3e      	cmp	r3, #62	; 0x3e
 800650c:	d923      	bls.n	8006556 <USB_EPStartXfer+0x149c>
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <USB_EPStartXfer+0x1474>
 8006524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006528:	3b01      	subs	r3, #1
 800652a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800652e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653a:	b29b      	uxth	r3, r3
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	b29b      	uxth	r3, r3
 8006540:	4313      	orrs	r3, r2
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e060      	b.n	8006618 <USB_EPStartXfer+0x155e>
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10c      	bne.n	8006578 <USB_EPStartXfer+0x14be>
 800655e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e04f      	b.n	8006618 <USB_EPStartXfer+0x155e>
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <USB_EPStartXfer+0x14de>
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006592:	3301      	adds	r3, #1
 8006594:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	029b      	lsls	r3, r3, #10
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	4313      	orrs	r3, r2
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e030      	b.n	8006618 <USB_EPStartXfer+0x155e>
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d128      	bne.n	8006618 <USB_EPStartXfer+0x155e>
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ea:	4413      	add	r3, r2
 80065ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	00da      	lsls	r2, r3, #3
 80065fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006602:	4413      	add	r3, r2
 8006604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8085 	bne.w	8006742 <USB_EPStartXfer+0x1688>
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800665c:	4413      	add	r3, r2
 800665e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	00da      	lsls	r2, r3, #3
 8006670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006674:	4413      	add	r3, r2
 8006676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800667a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800667e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800668a:	b29a      	uxth	r2, r3
 800668c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	2b3e      	cmp	r3, #62	; 0x3e
 8006698:	d923      	bls.n	80066e2 <USB_EPStartXfer+0x1628>
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <USB_EPStartXfer+0x1600>
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	029b      	lsls	r3, r3, #10
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	4313      	orrs	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e05c      	b.n	800679c <USB_EPStartXfer+0x16e2>
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <USB_EPStartXfer+0x164a>
 80066ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e04b      	b.n	800679c <USB_EPStartXfer+0x16e2>
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <USB_EPStartXfer+0x166a>
 800671a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800671e:	3301      	adds	r3, #1
 8006720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006730:	b29b      	uxth	r3, r3
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	b29b      	uxth	r3, r3
 8006736:	4313      	orrs	r3, r2
 8006738:	b29a      	uxth	r2, r3
 800673a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e02c      	b.n	800679c <USB_EPStartXfer+0x16e2>
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d124      	bne.n	800679c <USB_EPStartXfer+0x16e2>
 8006752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006768:	4413      	add	r3, r2
 800676a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006780:	4413      	add	r3, r2
 8006782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	e001      	b.n	800679c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e03a      	b.n	8006812 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	b29b      	uxth	r3, r3
 800680e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d020      	beq.n	8006870 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006844:	81bb      	strh	r3, [r7, #12]
 8006846:	89bb      	ldrh	r3, [r7, #12]
 8006848:	f083 0310 	eor.w	r3, r3, #16
 800684c:	81bb      	strh	r3, [r7, #12]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	89bb      	ldrh	r3, [r7, #12]
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
 800686e:	e01f      	b.n	80068b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	81fb      	strh	r3, [r7, #14]
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800688e:	81fb      	strh	r3, [r7, #14]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068be:	b480      	push	{r7}
 80068c0:	b087      	sub	sp, #28
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 809d 	bne.w	8006a0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04c      	beq.n	8006974 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	823b      	strh	r3, [r7, #16]
 80068e8:	8a3b      	ldrh	r3, [r7, #16]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01b      	beq.n	800692a <USB_EPClearStall+0x6c>
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	81fb      	strh	r3, [r7, #14]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	78db      	ldrb	r3, [r3, #3]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d06c      	beq.n	8006a0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006948:	81bb      	strh	r3, [r7, #12]
 800694a:	89bb      	ldrh	r3, [r7, #12]
 800694c:	f083 0320 	eor.w	r3, r3, #32
 8006950:	81bb      	strh	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	89bb      	ldrh	r3, [r7, #12]
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]
 8006972:	e04b      	b.n	8006a0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	82fb      	strh	r3, [r7, #22]
 8006982:	8afb      	ldrh	r3, [r7, #22]
 8006984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <USB_EPClearStall+0x106>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	82bb      	strh	r3, [r7, #20]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8abb      	ldrh	r3, [r7, #20]
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	827b      	strh	r3, [r7, #18]
 80069dc:	8a7b      	ldrh	r3, [r7, #18]
 80069de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069e2:	827b      	strh	r3, [r7, #18]
 80069e4:	8a7b      	ldrh	r3, [r7, #18]
 80069e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ea:	827b      	strh	r3, [r7, #18]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8a7b      	ldrh	r3, [r7, #18]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2280      	movs	r2, #128	; 0x80
 8006a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b08b      	sub	sp, #44	; 0x2c
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	80fb      	strh	r3, [r7, #6]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aa6:	88bb      	ldrh	r3, [r7, #4]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac6:	e01b      	b.n	8006b00 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	b21a      	sxth	r2, r3
 8006ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	8a7a      	ldrh	r2, [r7, #18]
 8006ae6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	3302      	adds	r3, #2
 8006aec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	3b01      	subs	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e0      	bne.n	8006ac8 <USB_WritePMA+0x38>
  }
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	372c      	adds	r7, #44	; 0x2c
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b08b      	sub	sp, #44	; 0x2c
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	460b      	mov	r3, r1
 8006b24:	80fb      	strh	r3, [r7, #6]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b2a:	88bb      	ldrh	r3, [r7, #4]
 8006b2c:	085b      	lsrs	r3, r3, #1
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4a:	e018      	b.n	8006b7e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	3302      	adds	r3, #2
 8006b58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	3301      	adds	r3, #1
 8006b66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3301      	adds	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	701a      	strb	r2, [r3, #0]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	372c      	adds	r7, #44	; 0x2c
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bbc:	f002 fc6e 	bl	800949c <USBD_static_malloc>
 8006bc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	32b0      	adds	r2, #176	; 0xb0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e0d4      	b.n	8006d86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bdc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006be0:	2100      	movs	r1, #0
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f002 fcce 	bl	8009584 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	32b0      	adds	r2, #176	; 0xb0
 8006bf2:	68f9      	ldr	r1, [r7, #12]
 8006bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32b0      	adds	r2, #176	; 0xb0
 8006c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	7c1b      	ldrb	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d138      	bne.n	8006c86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c14:	4b5e      	ldr	r3, [pc, #376]	; (8006d90 <USBD_CDC_Init+0x1e4>)
 8006c16:	7819      	ldrb	r1, [r3, #0]
 8006c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f002 fae1 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c24:	4b5a      	ldr	r3, [pc, #360]	; (8006d90 <USBD_CDC_Init+0x1e4>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3324      	adds	r3, #36	; 0x24
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c3e:	4b55      	ldr	r3, [pc, #340]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006c40:	7819      	ldrb	r1, [r3, #0]
 8006c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c46:	2202      	movs	r2, #2
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 facc 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c4e:	4b51      	ldr	r3, [pc, #324]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c66:	2201      	movs	r2, #1
 8006c68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c6a:	4b4b      	ldr	r3, [pc, #300]	; (8006d98 <USBD_CDC_Init+0x1ec>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3326      	adds	r3, #38	; 0x26
 8006c80:	2210      	movs	r2, #16
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e035      	b.n	8006cf2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c86:	4b42      	ldr	r3, [pc, #264]	; (8006d90 <USBD_CDC_Init+0x1e4>)
 8006c88:	7819      	ldrb	r1, [r3, #0]
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f002 faa9 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <USBD_CDC_Init+0x1e4>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	2201      	movs	r2, #1
 8006cac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006cb0:	7819      	ldrb	r1, [r3, #0]
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fa95 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cbc:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cd8:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <USBD_CDC_Init+0x1ec>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	3326      	adds	r3, #38	; 0x26
 8006cee:	2210      	movs	r2, #16
 8006cf0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cf2:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <USBD_CDC_Init+0x1ec>)
 8006cf4:	7819      	ldrb	r1, [r3, #0]
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 fa73 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d00:	4b25      	ldr	r3, [pc, #148]	; (8006d98 <USBD_CDC_Init+0x1ec>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	2201      	movs	r2, #1
 8006d18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	33b0      	adds	r3, #176	; 0xb0
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d50:	2302      	movs	r3, #2
 8006d52:	e018      	b.n	8006d86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7c1b      	ldrb	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006d5e:	7819      	ldrb	r1, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f002 fb2b 	bl	80093c6 <USBD_LL_PrepareReceive>
 8006d70:	e008      	b.n	8006d84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <USBD_CDC_Init+0x1e8>)
 8006d74:	7819      	ldrb	r1, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f002 fb21 	bl	80093c6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200000db 	.word	0x200000db
 8006d94:	200000dc 	.word	0x200000dc
 8006d98:	200000dd 	.word	0x200000dd

08006d9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006da8:	4b3a      	ldr	r3, [pc, #232]	; (8006e94 <USBD_CDC_DeInit+0xf8>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f002 fa3f 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006db4:	4b37      	ldr	r3, [pc, #220]	; (8006e94 <USBD_CDC_DeInit+0xf8>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3324      	adds	r3, #36	; 0x24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006dce:	4b32      	ldr	r3, [pc, #200]	; (8006e98 <USBD_CDC_DeInit+0xfc>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f002 fa2c 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dda:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <USBD_CDC_DeInit+0xfc>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006df2:	2200      	movs	r2, #0
 8006df4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <USBD_CDC_DeInit+0x100>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 fa18 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e02:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <USBD_CDC_DeInit+0x100>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f003 020f 	and.w	r2, r3, #15
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	2200      	movs	r2, #0
 8006e1a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e1c:	4b1f      	ldr	r3, [pc, #124]	; (8006e9c <USBD_CDC_DeInit+0x100>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	3326      	adds	r3, #38	; 0x26
 8006e32:	2200      	movs	r2, #0
 8006e34:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32b0      	adds	r2, #176	; 0xb0
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01f      	beq.n	8006e88 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	33b0      	adds	r3, #176	; 0xb0
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 fb24 	bl	80094b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	; 0xb0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200000db 	.word	0x200000db
 8006e98:	200000dc 	.word	0x200000dc
 8006e9c:	200000dd 	.word	0x200000dd

08006ea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	32b0      	adds	r2, #176	; 0xb0
 8006eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e0bf      	b.n	8007050 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d050      	beq.n	8006f7e <USBD_CDC_Setup+0xde>
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	f040 80af 	bne.w	8007040 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d03a      	beq.n	8006f60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da1b      	bge.n	8006f2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	33b0      	adds	r3, #176	; 0xb0
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	88d2      	ldrh	r2, [r2, #6]
 8006f10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	88db      	ldrh	r3, [r3, #6]
 8006f16:	2b07      	cmp	r3, #7
 8006f18:	bf28      	it	cs
 8006f1a:	2307      	movcs	r3, #7
 8006f1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	89fa      	ldrh	r2, [r7, #14]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fd21 	bl	800896c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f2a:	e090      	b.n	800704e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785a      	ldrb	r2, [r3, #1]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	88db      	ldrh	r3, [r3, #6]
 8006f3a:	2b3f      	cmp	r3, #63	; 0x3f
 8006f3c:	d803      	bhi.n	8006f46 <USBD_CDC_Setup+0xa6>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	88db      	ldrh	r3, [r3, #6]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	e000      	b.n	8006f48 <USBD_CDC_Setup+0xa8>
 8006f46:	2240      	movs	r2, #64	; 0x40
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f4e:	6939      	ldr	r1, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f56:	461a      	mov	r2, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 fd33 	bl	80089c4 <USBD_CtlPrepareRx>
      break;
 8006f5e:	e076      	b.n	800704e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	33b0      	adds	r3, #176	; 0xb0
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	7850      	ldrb	r0, [r2, #1]
 8006f76:	2200      	movs	r2, #0
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	4798      	blx	r3
      break;
 8006f7c:	e067      	b.n	800704e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b0b      	cmp	r3, #11
 8006f84:	d851      	bhi.n	800702a <USBD_CDC_Setup+0x18a>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBD_CDC_Setup+0xec>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08007039 	.word	0x08007039
 8006f94:	0800702b 	.word	0x0800702b
 8006f98:	0800702b 	.word	0x0800702b
 8006f9c:	0800702b 	.word	0x0800702b
 8006fa0:	0800702b 	.word	0x0800702b
 8006fa4:	0800702b 	.word	0x0800702b
 8006fa8:	0800702b 	.word	0x0800702b
 8006fac:	0800702b 	.word	0x0800702b
 8006fb0:	0800702b 	.word	0x0800702b
 8006fb4:	08006fe7 	.word	0x08006fe7
 8006fb8:	08007011 	.word	0x08007011
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d107      	bne.n	8006fd8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fc8:	f107 030a 	add.w	r3, r7, #10
 8006fcc:	2202      	movs	r2, #2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fccb 	bl	800896c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd6:	e032      	b.n	800703e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fc55 	bl	800888a <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe4:	e02b      	b.n	800703e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d107      	bne.n	8007002 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ff2:	f107 030d 	add.w	r3, r7, #13
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 fcb6 	bl	800896c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007000:	e01d      	b.n	800703e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fc40 	bl	800888a <USBD_CtlError>
            ret = USBD_FAIL;
 800700a:	2303      	movs	r3, #3
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e016      	b.n	800703e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b03      	cmp	r3, #3
 800701a:	d00f      	beq.n	800703c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fc33 	bl	800888a <USBD_CtlError>
            ret = USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007028:	e008      	b.n	800703c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fc2c 	bl	800888a <USBD_CtlError>
          ret = USBD_FAIL;
 8007032:	2303      	movs	r3, #3
 8007034:	75fb      	strb	r3, [r7, #23]
          break;
 8007036:	e002      	b.n	800703e <USBD_CDC_Setup+0x19e>
          break;
 8007038:	bf00      	nop
 800703a:	e008      	b.n	800704e <USBD_CDC_Setup+0x1ae>
          break;
 800703c:	bf00      	nop
      }
      break;
 800703e:	e006      	b.n	800704e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fc21 	bl	800888a <USBD_CtlError>
      ret = USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	bf00      	nop
  }

  return (uint8_t)ret;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800706a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32b0      	adds	r2, #176	; 0xb0
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800707e:	2303      	movs	r3, #3
 8007080:	e065      	b.n	800714e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	32b0      	adds	r2, #176	; 0xb0
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3318      	adds	r3, #24
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02f      	beq.n	800710c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	3318      	adds	r3, #24
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	f003 010f 	and.w	r1, r3, #15
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	460b      	mov	r3, r1
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4403      	add	r3, r0
 80070d4:	3338      	adds	r3, #56	; 0x38
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d112      	bne.n	800710c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	f003 020f 	and.w	r2, r3, #15
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	3318      	adds	r3, #24
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070fe:	78f9      	ldrb	r1, [r7, #3]
 8007100:	2300      	movs	r3, #0
 8007102:	2200      	movs	r2, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f002 f93d 	bl	8009384 <USBD_LL_Transmit>
 800710a:	e01f      	b.n	800714c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	33b0      	adds	r3, #176	; 0xb0
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d010      	beq.n	800714c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	33b0      	adds	r3, #176	; 0xb0
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	32b0      	adds	r2, #176	; 0xb0
 800716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007170:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	32b0      	adds	r2, #176	; 0xb0
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e01a      	b.n	80071be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f002 f93b 	bl	8009408 <USBD_LL_GetRxDataSize>
 8007192:	4602      	mov	r2, r0
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	33b0      	adds	r3, #176	; 0xb0
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071b8:	4611      	mov	r1, r2
 80071ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	32b0      	adds	r2, #176	; 0xb0
 80071d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e025      	b.n	8007234 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	33b0      	adds	r3, #176	; 0xb0
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01a      	beq.n	8007232 <USBD_CDC_EP0_RxReady+0x6c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007202:	2bff      	cmp	r3, #255	; 0xff
 8007204:	d015      	beq.n	8007232 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	33b0      	adds	r3, #176	; 0xb0
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800721e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007226:	b292      	uxth	r2, r2
 8007228:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007244:	2182      	movs	r1, #130	; 0x82
 8007246:	4818      	ldr	r0, [pc, #96]	; (80072a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007248:	f000 fcbd 	bl	8007bc6 <USBD_GetEpDesc>
 800724c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800724e:	2101      	movs	r1, #1
 8007250:	4815      	ldr	r0, [pc, #84]	; (80072a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007252:	f000 fcb8 	bl	8007bc6 <USBD_GetEpDesc>
 8007256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007258:	2181      	movs	r1, #129	; 0x81
 800725a:	4813      	ldr	r0, [pc, #76]	; (80072a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800725c:	f000 fcb3 	bl	8007bc6 <USBD_GetEpDesc>
 8007260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2210      	movs	r2, #16
 800726c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d006      	beq.n	8007282 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2200      	movs	r2, #0
 8007278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800727c:	711a      	strb	r2, [r3, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007290:	711a      	strb	r2, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2243      	movs	r2, #67	; 0x43
 800729a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000098 	.word	0x20000098

080072ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072b4:	2182      	movs	r1, #130	; 0x82
 80072b6:	4818      	ldr	r0, [pc, #96]	; (8007318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072b8:	f000 fc85 	bl	8007bc6 <USBD_GetEpDesc>
 80072bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072be:	2101      	movs	r1, #1
 80072c0:	4815      	ldr	r0, [pc, #84]	; (8007318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072c2:	f000 fc80 	bl	8007bc6 <USBD_GetEpDesc>
 80072c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072c8:	2181      	movs	r1, #129	; 0x81
 80072ca:	4813      	ldr	r0, [pc, #76]	; (8007318 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072cc:	f000 fc7b 	bl	8007bc6 <USBD_GetEpDesc>
 80072d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2210      	movs	r2, #16
 80072dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2200      	movs	r2, #0
 80072e8:	711a      	strb	r2, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f042 0202 	orr.w	r2, r2, #2
 80072f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	711a      	strb	r2, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f042 0202 	orr.w	r2, r2, #2
 8007304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2243      	movs	r2, #67	; 0x43
 800730a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000098 	.word	0x20000098

0800731c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007324:	2182      	movs	r1, #130	; 0x82
 8007326:	4818      	ldr	r0, [pc, #96]	; (8007388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007328:	f000 fc4d 	bl	8007bc6 <USBD_GetEpDesc>
 800732c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800732e:	2101      	movs	r1, #1
 8007330:	4815      	ldr	r0, [pc, #84]	; (8007388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007332:	f000 fc48 	bl	8007bc6 <USBD_GetEpDesc>
 8007336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007338:	2181      	movs	r1, #129	; 0x81
 800733a:	4813      	ldr	r0, [pc, #76]	; (8007388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800733c:	f000 fc43 	bl	8007bc6 <USBD_GetEpDesc>
 8007340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2210      	movs	r2, #16
 800734c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2200      	movs	r2, #0
 8007358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800735c:	711a      	strb	r2, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007370:	711a      	strb	r2, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2243      	movs	r2, #67	; 0x43
 800737a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000098 	.word	0x20000098

0800738c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	220a      	movs	r2, #10
 8007398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800739a:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000054 	.word	0x20000054

080073ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	e009      	b.n	80073d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	33b0      	adds	r3, #176	; 0xb0
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	32b0      	adds	r2, #176	; 0xb0
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007402:	2303      	movs	r3, #3
 8007404:	e008      	b.n	8007418 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	32b0      	adds	r2, #176	; 0xb0
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	e004      	b.n	8007452 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32b0      	adds	r2, #176	; 0xb0
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	e025      	b.n	80074d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800748c:	2b00      	cmp	r3, #0
 800748e:	d11f      	bne.n	80074d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2201      	movs	r2, #1
 8007494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007498:	4b10      	ldr	r3, [pc, #64]	; (80074dc <USBD_CDC_TransmitPacket+0x7c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4403      	add	r3, r0
 80074b2:	3318      	adds	r3, #24
 80074b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <USBD_CDC_TransmitPacket+0x7c>)
 80074b8:	7819      	ldrb	r1, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 ff5c 	bl	8009384 <USBD_LL_Transmit>

    ret = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200000db 	.word	0x200000db

080074e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32b0      	adds	r2, #176	; 0xb0
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32b0      	adds	r2, #176	; 0xb0
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e018      	b.n	8007540 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <USBD_CDC_ReceivePacket+0x68>)
 8007518:	7819      	ldrb	r1, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 ff4e 	bl	80093c6 <USBD_LL_PrepareReceive>
 800752a:	e008      	b.n	800753e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <USBD_CDC_ReceivePacket+0x68>)
 800752e:	7819      	ldrb	r1, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 ff44 	bl	80093c6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200000dc 	.word	0x200000dc

0800754c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4613      	mov	r3, r2
 8007558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	e01f      	b.n	80075a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f001 fda7 	bl	80090ec <USBD_LL_Init>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e025      	b.n	8007610 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	32ae      	adds	r2, #174	; 0xae
 80075d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00f      	beq.n	8007600 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	; 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f107 020e 	add.w	r2, r7, #14
 80075f4:	4610      	mov	r0, r2
 80075f6:	4798      	blx	r3
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fdc5 	bl	80091b0 <USBD_LL_Start>
 8007626:	4603      	mov	r3, r0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	4611      	mov	r1, r2
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 f8a6 	bl	8008816 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d01a      	beq.n	8007724 <USBD_LL_SetupStage+0x72>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d822      	bhi.n	8007738 <USBD_LL_SetupStage+0x86>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <USBD_LL_SetupStage+0x4a>
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d00a      	beq.n	8007710 <USBD_LL_SetupStage+0x5e>
 80076fa:	e01d      	b.n	8007738 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fad3 	bl	8007cb0 <USBD_StdDevReq>
 800770a:	4603      	mov	r3, r0
 800770c:	73fb      	strb	r3, [r7, #15]
      break;
 800770e:	e020      	b.n	8007752 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb3b 	bl	8007d94 <USBD_StdItfReq>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]
      break;
 8007722:	e016      	b.n	8007752 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb9d 	bl	8007e6c <USBD_StdEPReq>
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
      break;
 8007736:	e00c      	b.n	8007752 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800773e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fd92 	bl	8009270 <USBD_LL_StallEP>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	bf00      	nop
  }

  return ret;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	460b      	mov	r3, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d16e      	bne.n	8007852 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800777a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007782:	2b03      	cmp	r3, #3
 8007784:	f040 8098 	bne.w	80078b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	429a      	cmp	r2, r3
 8007792:	d913      	bls.n	80077bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	1ad2      	subs	r2, r2, r3
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4293      	cmp	r3, r2
 80077ac:	bf28      	it	cs
 80077ae:	4613      	movcs	r3, r2
 80077b0:	461a      	mov	r2, r3
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f001 f922 	bl	80089fe <USBD_CtlContinueRx>
 80077ba:	e07d      	b.n	80078b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d014      	beq.n	80077f4 <USBD_LL_DataOutStage+0x98>
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d81d      	bhi.n	800780a <USBD_LL_DataOutStage+0xae>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <USBD_LL_DataOutStage+0x7c>
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d003      	beq.n	80077de <USBD_LL_DataOutStage+0x82>
 80077d6:	e018      	b.n	800780a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	75bb      	strb	r3, [r7, #22]
            break;
 80077dc:	e018      	b.n	8007810 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f9d2 	bl	8007b92 <USBD_CoreFindIF>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75bb      	strb	r3, [r7, #22]
            break;
 80077f2:	e00d      	b.n	8007810 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	4619      	mov	r1, r3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f9d4 	bl	8007bac <USBD_CoreFindEP>
 8007804:	4603      	mov	r3, r0
 8007806:	75bb      	strb	r3, [r7, #22]
            break;
 8007808:	e002      	b.n	8007810 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	75bb      	strb	r3, [r7, #22]
            break;
 800780e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007810:	7dbb      	ldrb	r3, [r7, #22]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d119      	bne.n	800784a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d113      	bne.n	800784a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007822:	7dba      	ldrb	r2, [r7, #22]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	32ae      	adds	r2, #174	; 0xae
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007832:	7dba      	ldrb	r2, [r7, #22]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800783a:	7dba      	ldrb	r2, [r7, #22]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	32ae      	adds	r2, #174	; 0xae
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f001 f8e8 	bl	8008a20 <USBD_CtlSendStatus>
 8007850:	e032      	b.n	80078b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007858:	b2db      	uxtb	r3, r3
 800785a:	4619      	mov	r1, r3
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f9a5 	bl	8007bac <USBD_CoreFindEP>
 8007862:	4603      	mov	r3, r0
 8007864:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007866:	7dbb      	ldrb	r3, [r7, #22]
 8007868:	2bff      	cmp	r3, #255	; 0xff
 800786a:	d025      	beq.n	80078b8 <USBD_LL_DataOutStage+0x15c>
 800786c:	7dbb      	ldrb	r3, [r7, #22]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d122      	bne.n	80078b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d117      	bne.n	80078ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800787e:	7dba      	ldrb	r2, [r7, #22]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	32ae      	adds	r2, #174	; 0xae
 8007884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800788e:	7dba      	ldrb	r2, [r7, #22]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007896:	7dba      	ldrb	r2, [r7, #22]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	32ae      	adds	r2, #174	; 0xae
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	7afa      	ldrb	r2, [r7, #11]
 80078a4:	4611      	mov	r1, r2
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	e000      	b.n	80078ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	460b      	mov	r3, r1
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d16f      	bne.n	80079b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3314      	adds	r3, #20
 80078da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d15a      	bne.n	800799c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d914      	bls.n	800791c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	461a      	mov	r2, r3
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f001 f84a 	bl	80089a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800790e:	2300      	movs	r3, #0
 8007910:	2200      	movs	r2, #0
 8007912:	2100      	movs	r1, #0
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 fd56 	bl	80093c6 <USBD_LL_PrepareReceive>
 800791a:	e03f      	b.n	800799c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	d11c      	bne.n	8007962 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007930:	429a      	cmp	r2, r3
 8007932:	d316      	bcc.n	8007962 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800793e:	429a      	cmp	r2, r3
 8007940:	d20f      	bcs.n	8007962 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007942:	2200      	movs	r2, #0
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 f82b 	bl	80089a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007954:	2300      	movs	r3, #0
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 fd33 	bl	80093c6 <USBD_LL_PrepareReceive>
 8007960:	e01c      	b.n	800799c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b03      	cmp	r3, #3
 800796c:	d10f      	bne.n	800798e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800798e:	2180      	movs	r1, #128	; 0x80
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f001 fc6d 	bl	8009270 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f001 f855 	bl	8008a46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d03a      	beq.n	8007a1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7ff fe42 	bl	8007630 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079b4:	e032      	b.n	8007a1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f8f3 	bl	8007bac <USBD_CoreFindEP>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	2bff      	cmp	r3, #255	; 0xff
 80079ce:	d025      	beq.n	8007a1c <USBD_LL_DataInStage+0x15a>
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d122      	bne.n	8007a1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d11c      	bne.n	8007a1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079e2:	7dfa      	ldrb	r2, [r7, #23]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	32ae      	adds	r2, #174	; 0xae
 80079e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d014      	beq.n	8007a1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079f2:	7dfa      	ldrb	r2, [r7, #23]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079fa:	7dfa      	ldrb	r2, [r7, #23]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	32ae      	adds	r2, #174	; 0xae
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	7afa      	ldrb	r2, [r7, #11]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	4798      	blx	r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a12:	7dbb      	ldrb	r3, [r7, #22]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a18:	7dbb      	ldrb	r3, [r7, #22]
 8007a1a:	e000      	b.n	8007a1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d014      	beq.n	8007a8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6852      	ldr	r2, [r2, #4]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fba7 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2240      	movs	r2, #64	; 0x40
 8007aa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fb99 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2240      	movs	r2, #64	; 0x40
 8007abe:	621a      	str	r2, [r3, #32]

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d006      	beq.n	8007b0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2204      	movs	r2, #4
 8007b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d106      	bne.n	8007b44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d110      	bne.n	8007b88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d920      	bls.n	8007c30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bf6:	e013      	b.n	8007c20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bf8:	f107 030a 	add.w	r3, r7, #10
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f000 f81b 	bl	8007c3a <USBD_GetNextDesc>
 8007c04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b05      	cmp	r3, #5
 8007c0c:	d108      	bne.n	8007c20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	789b      	ldrb	r3, [r3, #2]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d008      	beq.n	8007c2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	885b      	ldrh	r3, [r3, #2]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d8e5      	bhi.n	8007bf8 <USBD_GetEpDesc+0x32>
 8007c2c:	e000      	b.n	8007c30 <USBD_GetEpDesc+0x6a>
          break;
 8007c2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c30:	693b      	ldr	r3, [r7, #16]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	881a      	ldrh	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c92:	8a3b      	ldrh	r3, [r7, #16]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	b21a      	sxth	r2, r3
 8007c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	b21b      	sxth	r3, r3
 8007ca0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d005      	beq.n	8007cd6 <USBD_StdDevReq+0x26>
 8007cca:	2b40      	cmp	r3, #64	; 0x40
 8007ccc:	d857      	bhi.n	8007d7e <USBD_StdDevReq+0xce>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00f      	beq.n	8007cf2 <USBD_StdDevReq+0x42>
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d153      	bne.n	8007d7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	32ae      	adds	r2, #174	; 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e04a      	b.n	8007d88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d83b      	bhi.n	8007d72 <USBD_StdDevReq+0xc2>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <USBD_StdDevReq+0x50>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007d69 	.word	0x08007d69
 8007d08:	08007d73 	.word	0x08007d73
 8007d0c:	08007d5f 	.word	0x08007d5f
 8007d10:	08007d73 	.word	0x08007d73
 8007d14:	08007d33 	.word	0x08007d33
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d73 	.word	0x08007d73
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d3d 	.word	0x08007d3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa3c 	bl	80081a8 <USBD_GetDescriptor>
          break;
 8007d30:	e024      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fbcb 	bl	80084d0 <USBD_SetAddress>
          break;
 8007d3a:	e01f      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fc0a 	bl	8008558 <USBD_SetConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
          break;
 8007d48:	e018      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fcad 	bl	80086ac <USBD_GetConfig>
          break;
 8007d52:	e013      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fcde 	bl	8008718 <USBD_GetStatus>
          break;
 8007d5c:	e00e      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fd0d 	bl	8008780 <USBD_SetFeature>
          break;
 8007d66:	e009      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fd31 	bl	80087d2 <USBD_ClrFeature>
          break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fd88 	bl	800888a <USBD_CtlError>
          break;
 8007d7a:	bf00      	nop
      }
      break;
 8007d7c:	e004      	b.n	8007d88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fd82 	bl	800888a <USBD_CtlError>
      break;
 8007d86:	bf00      	nop
  }

  return ret;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop

08007d94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d005      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d852      	bhi.n	8007e58 <USBD_StdItfReq+0xc4>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d14e      	bne.n	8007e58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d840      	bhi.n	8007e4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	889b      	ldrh	r3, [r3, #4]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d836      	bhi.n	8007e40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	889b      	ldrh	r3, [r3, #4]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fed9 	bl	8007b92 <USBD_CoreFindIF>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2bff      	cmp	r3, #255	; 0xff
 8007de8:	d01d      	beq.n	8007e26 <USBD_StdItfReq+0x92>
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d11a      	bne.n	8007e26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007df0:	7bba      	ldrb	r2, [r7, #14]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00f      	beq.n	8007e20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e00:	7bba      	ldrb	r2, [r7, #14]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e08:	7bba      	ldrb	r2, [r7, #14]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32ae      	adds	r2, #174	; 0xae
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e1e:	e004      	b.n	8007e2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e24:	e001      	b.n	8007e2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e26:	2303      	movs	r3, #3
 8007e28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d110      	bne.n	8007e54 <USBD_StdItfReq+0xc0>
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fdf1 	bl	8008a20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e3e:	e009      	b.n	8007e54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fd21 	bl	800888a <USBD_CtlError>
          break;
 8007e48:	e004      	b.n	8007e54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fd1c 	bl	800888a <USBD_CtlError>
          break;
 8007e52:	e000      	b.n	8007e56 <USBD_StdItfReq+0xc2>
          break;
 8007e54:	bf00      	nop
      }
      break;
 8007e56:	e004      	b.n	8007e62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fd15 	bl	800888a <USBD_CtlError>
      break;
 8007e60:	bf00      	nop
  }

  return ret;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	889b      	ldrh	r3, [r3, #4]
 8007e7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d007      	beq.n	8007e9c <USBD_StdEPReq+0x30>
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	f200 817f 	bhi.w	8008190 <USBD_StdEPReq+0x324>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02a      	beq.n	8007eec <USBD_StdEPReq+0x80>
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	f040 817a 	bne.w	8008190 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fe83 	bl	8007bac <USBD_CoreFindEP>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eaa:	7b7b      	ldrb	r3, [r7, #13]
 8007eac:	2bff      	cmp	r3, #255	; 0xff
 8007eae:	f000 8174 	beq.w	800819a <USBD_StdEPReq+0x32e>
 8007eb2:	7b7b      	ldrb	r3, [r7, #13]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f040 8170 	bne.w	800819a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007eba:	7b7a      	ldrb	r2, [r7, #13]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ec2:	7b7a      	ldrb	r2, [r7, #13]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	32ae      	adds	r2, #174	; 0xae
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8163 	beq.w	800819a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ed4:	7b7a      	ldrb	r2, [r7, #13]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32ae      	adds	r2, #174	; 0xae
 8007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007eea:	e156      	b.n	800819a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d008      	beq.n	8007f06 <USBD_StdEPReq+0x9a>
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	f300 8145 	bgt.w	8008184 <USBD_StdEPReq+0x318>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 809b 	beq.w	8008036 <USBD_StdEPReq+0x1ca>
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d03c      	beq.n	8007f7e <USBD_StdEPReq+0x112>
 8007f04:	e13e      	b.n	8008184 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d002      	beq.n	8007f18 <USBD_StdEPReq+0xac>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d016      	beq.n	8007f44 <USBD_StdEPReq+0xd8>
 8007f16:	e02c      	b.n	8007f72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <USBD_StdEPReq+0xce>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d00a      	beq.n	8007f3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f9a1 	bl	8009270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2e:	2180      	movs	r1, #128	; 0x80
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f99d 	bl	8009270 <USBD_LL_StallEP>
 8007f36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f38:	e020      	b.n	8007f7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fca4 	bl	800888a <USBD_CtlError>
              break;
 8007f42:	e01b      	b.n	8007f7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	885b      	ldrh	r3, [r3, #2]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <USBD_StdEPReq+0xfe>
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b80      	cmp	r3, #128	; 0x80
 8007f56:	d008      	beq.n	8007f6a <USBD_StdEPReq+0xfe>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	88db      	ldrh	r3, [r3, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f983 	bl	8009270 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fd58 	bl	8008a20 <USBD_CtlSendStatus>

              break;
 8007f70:	e004      	b.n	8007f7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc88 	bl	800888a <USBD_CtlError>
              break;
 8007f7a:	bf00      	nop
          }
          break;
 8007f7c:	e107      	b.n	800818e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d002      	beq.n	8007f90 <USBD_StdEPReq+0x124>
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d016      	beq.n	8007fbc <USBD_StdEPReq+0x150>
 8007f8e:	e04b      	b.n	8008028 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00d      	beq.n	8007fb2 <USBD_StdEPReq+0x146>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d00a      	beq.n	8007fb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f965 	bl	8009270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa6:	2180      	movs	r1, #128	; 0x80
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f961 	bl	8009270 <USBD_LL_StallEP>
 8007fae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb0:	e040      	b.n	8008034 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc68 	bl	800888a <USBD_CtlError>
              break;
 8007fba:	e03b      	b.n	8008034 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	885b      	ldrh	r3, [r3, #2]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d136      	bne.n	8008032 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 f96b 	bl	80092ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fd21 	bl	8008a20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fde2 	bl	8007bac <USBD_CoreFindEP>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fec:	7b7b      	ldrb	r3, [r7, #13]
 8007fee:	2bff      	cmp	r3, #255	; 0xff
 8007ff0:	d01f      	beq.n	8008032 <USBD_StdEPReq+0x1c6>
 8007ff2:	7b7b      	ldrb	r3, [r7, #13]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11c      	bne.n	8008032 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ff8:	7b7a      	ldrb	r2, [r7, #13]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008000:	7b7a      	ldrb	r2, [r7, #13]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32ae      	adds	r2, #174	; 0xae
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d010      	beq.n	8008032 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	32ae      	adds	r2, #174	; 0xae
 8008016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008026:	e004      	b.n	8008032 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc2d 	bl	800888a <USBD_CtlError>
              break;
 8008030:	e000      	b.n	8008034 <USBD_StdEPReq+0x1c8>
              break;
 8008032:	bf00      	nop
          }
          break;
 8008034:	e0ab      	b.n	800818e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d002      	beq.n	8008048 <USBD_StdEPReq+0x1dc>
 8008042:	2b03      	cmp	r3, #3
 8008044:	d032      	beq.n	80080ac <USBD_StdEPReq+0x240>
 8008046:	e097      	b.n	8008178 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <USBD_StdEPReq+0x1f2>
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b80      	cmp	r3, #128	; 0x80
 8008052:	d004      	beq.n	800805e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fc17 	bl	800888a <USBD_CtlError>
                break;
 800805c:	e091      	b.n	8008182 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800805e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	da0b      	bge.n	800807e <USBD_StdEPReq+0x212>
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	3310      	adds	r3, #16
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	3304      	adds	r3, #4
 800807c:	e00b      	b.n	8008096 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	4413      	add	r3, r2
 8008094:	3304      	adds	r3, #4
 8008096:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2202      	movs	r2, #2
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fc61 	bl	800896c <USBD_CtlSendData>
              break;
 80080aa:	e06a      	b.n	8008182 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	da11      	bge.n	80080d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	f003 020f 	and.w	r2, r3, #15
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d117      	bne.n	80080fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fbda 	bl	800888a <USBD_CtlError>
                  break;
 80080d6:	e054      	b.n	8008182 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fbc7 	bl	800888a <USBD_CtlError>
                  break;
 80080fc:	e041      	b.n	8008182 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008102:	2b00      	cmp	r3, #0
 8008104:	da0b      	bge.n	800811e <USBD_StdEPReq+0x2b2>
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	3310      	adds	r3, #16
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4413      	add	r3, r2
 800811a:	3304      	adds	r3, #4
 800811c:	e00b      	b.n	8008136 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	3304      	adds	r3, #4
 8008136:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <USBD_StdEPReq+0x2d8>
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d103      	bne.n	800814c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e00e      	b.n	800816a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f8cb 	bl	80092ec <USBD_LL_IsStallEP>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e002      	b.n	800816a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2202      	movs	r2, #2
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fbfb 	bl	800896c <USBD_CtlSendData>
              break;
 8008176:	e004      	b.n	8008182 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fb85 	bl	800888a <USBD_CtlError>
              break;
 8008180:	bf00      	nop
          }
          break;
 8008182:	e004      	b.n	800818e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb7f 	bl	800888a <USBD_CtlError>
          break;
 800818c:	bf00      	nop
      }
      break;
 800818e:	e005      	b.n	800819c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fb79 	bl	800888a <USBD_CtlError>
      break;
 8008198:	e000      	b.n	800819c <USBD_StdEPReq+0x330>
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	885b      	ldrh	r3, [r3, #2]
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	2b0e      	cmp	r3, #14
 80081ca:	f200 8152 	bhi.w	8008472 <USBD_GetDescriptor+0x2ca>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <USBD_GetDescriptor+0x2c>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	08008245 	.word	0x08008245
 80081d8:	0800825d 	.word	0x0800825d
 80081dc:	0800829d 	.word	0x0800829d
 80081e0:	08008473 	.word	0x08008473
 80081e4:	08008473 	.word	0x08008473
 80081e8:	08008413 	.word	0x08008413
 80081ec:	0800843f 	.word	0x0800843f
 80081f0:	08008473 	.word	0x08008473
 80081f4:	08008473 	.word	0x08008473
 80081f8:	08008473 	.word	0x08008473
 80081fc:	08008473 	.word	0x08008473
 8008200:	08008473 	.word	0x08008473
 8008204:	08008473 	.word	0x08008473
 8008208:	08008473 	.word	0x08008473
 800820c:	08008211 	.word	0x08008211
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008232:	e126      	b.n	8008482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fb27 	bl	800888a <USBD_CtlError>
        err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
      break;
 8008242:	e11e      	b.n	8008482 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	7c12      	ldrb	r2, [r2, #16]
 8008250:	f107 0108 	add.w	r1, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
      break;
 800825a:	e112      	b.n	8008482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7c1b      	ldrb	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10d      	bne.n	8008280 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	f107 0208 	add.w	r2, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800827e:	e100      	b.n	8008482 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	f107 0208 	add.w	r2, r7, #8
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	2202      	movs	r2, #2
 8008298:	701a      	strb	r2, [r3, #0]
      break;
 800829a:	e0f2      	b.n	8008482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	885b      	ldrh	r3, [r3, #2]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	f200 80ac 	bhi.w	8008400 <USBD_GetDescriptor+0x258>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USBD_GetDescriptor+0x108>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082c9 	.word	0x080082c9
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	08008331 	.word	0x08008331
 80082bc:	08008365 	.word	0x08008365
 80082c0:	08008399 	.word	0x08008399
 80082c4:	080083cd 	.word	0x080083cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	7c12      	ldrb	r2, [r2, #16]
 80082e0:	f107 0108 	add.w	r1, r7, #8
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3
 80082e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ea:	e091      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 facb 	bl	800888a <USBD_CtlError>
            err++;
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	3301      	adds	r3, #1
 80082f8:	72fb      	strb	r3, [r7, #11]
          break;
 80082fa:	e089      	b.n	8008410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7c12      	ldrb	r2, [r2, #16]
 8008314:	f107 0108 	add.w	r1, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831e:	e077      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fab1 	bl	800888a <USBD_CtlError>
            err++;
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	3301      	adds	r3, #1
 800832c:	72fb      	strb	r3, [r7, #11]
          break;
 800832e:	e06f      	b.n	8008410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	7c12      	ldrb	r2, [r2, #16]
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008352:	e05d      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa97 	bl	800888a <USBD_CtlError>
            err++;
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	3301      	adds	r3, #1
 8008360:	72fb      	strb	r3, [r7, #11]
          break;
 8008362:	e055      	b.n	8008410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7c12      	ldrb	r2, [r2, #16]
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008386:	e043      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa7d 	bl	800888a <USBD_CtlError>
            err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
          break;
 8008396:	e03b      	b.n	8008410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ba:	e029      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa63 	bl	800888a <USBD_CtlError>
            err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ca:	e021      	b.n	8008410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e00f      	b.n	8008410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa49 	bl	800888a <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e007      	b.n	8008410 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa41 	bl	800888a <USBD_CtlError>
          err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800840e:	bf00      	nop
      }
      break;
 8008410:	e037      	b.n	8008482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	f107 0208 	add.w	r2, r7, #8
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
 800842a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800842c:	e029      	b.n	8008482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa2a 	bl	800888a <USBD_CtlError>
        err++;
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	3301      	adds	r3, #1
 800843a:	72fb      	strb	r3, [r7, #11]
      break;
 800843c:	e021      	b.n	8008482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7c1b      	ldrb	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	f107 0208 	add.w	r2, r7, #8
 8008452:	4610      	mov	r0, r2
 8008454:	4798      	blx	r3
 8008456:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	2207      	movs	r2, #7
 800845e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008460:	e00f      	b.n	8008482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa10 	bl	800888a <USBD_CtlError>
        err++;
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	3301      	adds	r3, #1
 800846e:	72fb      	strb	r3, [r7, #11]
      break;
 8008470:	e007      	b.n	8008482 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa08 	bl	800888a <USBD_CtlError>
      err++;
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	3301      	adds	r3, #1
 800847e:	72fb      	strb	r3, [r7, #11]
      break;
 8008480:	bf00      	nop
  }

  if (err != 0U)
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11e      	bne.n	80084c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d016      	beq.n	80084be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008490:	893b      	ldrh	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00e      	beq.n	80084b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88da      	ldrh	r2, [r3, #6]
 800849a:	893b      	ldrh	r3, [r7, #8]
 800849c:	4293      	cmp	r3, r2
 800849e:	bf28      	it	cs
 80084a0:	4613      	movcs	r3, r2
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084a6:	893b      	ldrh	r3, [r7, #8]
 80084a8:	461a      	mov	r2, r3
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa5d 	bl	800896c <USBD_CtlSendData>
 80084b2:	e009      	b.n	80084c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9e7 	bl	800888a <USBD_CtlError>
 80084bc:	e004      	b.n	80084c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 faae 	bl	8008a20 <USBD_CtlSendStatus>
 80084c4:	e000      	b.n	80084c8 <USBD_GetDescriptor+0x320>
    return;
 80084c6:	bf00      	nop
  }
}
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop

080084d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	889b      	ldrh	r3, [r3, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d131      	bne.n	8008546 <USBD_SetAddress+0x76>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12d      	bne.n	8008546 <USBD_SetAddress+0x76>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	2b7f      	cmp	r3, #127	; 0x7f
 80084f0:	d829      	bhi.n	8008546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b03      	cmp	r3, #3
 8008508:	d104      	bne.n	8008514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f9bc 	bl	800888a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008512:	e01d      	b.n	8008550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7bfa      	ldrb	r2, [r7, #15]
 8008518:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 ff10 	bl	8009346 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa7a 	bl	8008a20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	e009      	b.n	8008550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008544:	e004      	b.n	8008550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f99e 	bl	800888a <USBD_CtlError>
  }
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	b2da      	uxtb	r2, r3
 800856c:	4b4e      	ldr	r3, [pc, #312]	; (80086a8 <USBD_SetConfig+0x150>)
 800856e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008570:	4b4d      	ldr	r3, [pc, #308]	; (80086a8 <USBD_SetConfig+0x150>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d905      	bls.n	8008584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f985 	bl	800888a <USBD_CtlError>
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e08c      	b.n	800869e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d002      	beq.n	8008596 <USBD_SetConfig+0x3e>
 8008590:	2b03      	cmp	r3, #3
 8008592:	d029      	beq.n	80085e8 <USBD_SetConfig+0x90>
 8008594:	e075      	b.n	8008682 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008596:	4b44      	ldr	r3, [pc, #272]	; (80086a8 <USBD_SetConfig+0x150>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d020      	beq.n	80085e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800859e:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <USBD_SetConfig+0x150>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085a8:	4b3f      	ldr	r3, [pc, #252]	; (80086a8 <USBD_SetConfig+0x150>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff f849 	bl	8007646 <USBD_SetClassConfig>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f962 	bl	800888a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085ce:	e065      	b.n	800869c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fa25 	bl	8008a20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2203      	movs	r2, #3
 80085da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085de:	e05d      	b.n	800869c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa1d 	bl	8008a20 <USBD_CtlSendStatus>
      break;
 80085e6:	e059      	b.n	800869c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085e8:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <USBD_SetConfig+0x150>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d112      	bne.n	8008616 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <USBD_SetConfig+0x150>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008602:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <USBD_SetConfig+0x150>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff f838 	bl	800767e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa06 	bl	8008a20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008614:	e042      	b.n	800869c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <USBD_SetConfig+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d02a      	beq.n	800867a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff f826 	bl	800767e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008632:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <USBD_SetConfig+0x150>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <USBD_SetConfig+0x150>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe ffff 	bl	8007646 <USBD_SetClassConfig>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00f      	beq.n	8008672 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f918 	bl	800888a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff f80b 	bl	800767e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008670:	e014      	b.n	800869c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9d4 	bl	8008a20 <USBD_CtlSendStatus>
      break;
 8008678:	e010      	b.n	800869c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f9d0 	bl	8008a20 <USBD_CtlSendStatus>
      break;
 8008680:	e00c      	b.n	800869c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f900 	bl	800888a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800868a:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <USBD_SetConfig+0x150>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7fe fff4 	bl	800767e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008696:	2303      	movs	r3, #3
 8008698:	73fb      	strb	r3, [r7, #15]
      break;
 800869a:	bf00      	nop
  }

  return ret;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200001e8 	.word	0x200001e8

080086ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	88db      	ldrh	r3, [r3, #6]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d004      	beq.n	80086c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f8e2 	bl	800888a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086c6:	e023      	b.n	8008710 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	dc02      	bgt.n	80086da <USBD_GetConfig+0x2e>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dc03      	bgt.n	80086e0 <USBD_GetConfig+0x34>
 80086d8:	e015      	b.n	8008706 <USBD_GetConfig+0x5a>
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d00b      	beq.n	80086f6 <USBD_GetConfig+0x4a>
 80086de:	e012      	b.n	8008706 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3308      	adds	r3, #8
 80086ea:	2201      	movs	r2, #1
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f93c 	bl	800896c <USBD_CtlSendData>
        break;
 80086f4:	e00c      	b.n	8008710 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	2201      	movs	r2, #1
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f934 	bl	800896c <USBD_CtlSendData>
        break;
 8008704:	e004      	b.n	8008710 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f8be 	bl	800888a <USBD_CtlError>
        break;
 800870e:	bf00      	nop
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	2b02      	cmp	r3, #2
 800872e:	d81e      	bhi.n	800876e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d004      	beq.n	8008742 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f8a5 	bl	800888a <USBD_CtlError>
        break;
 8008740:	e01a      	b.n	8008778 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f043 0202 	orr.w	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	330c      	adds	r3, #12
 8008762:	2202      	movs	r2, #2
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f900 	bl	800896c <USBD_CtlSendData>
      break;
 800876c:	e004      	b.n	8008778 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f88a 	bl	800888a <USBD_CtlError>
      break;
 8008776:	bf00      	nop
  }
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	885b      	ldrh	r3, [r3, #2]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d107      	bne.n	80087a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f940 	bl	8008a20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087a0:	e013      	b.n	80087ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	885b      	ldrh	r3, [r3, #2]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d10b      	bne.n	80087c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	889b      	ldrh	r3, [r3, #4]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f930 	bl	8008a20 <USBD_CtlSendStatus>
}
 80087c0:	e003      	b.n	80087ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f860 	bl	800888a <USBD_CtlError>
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d80b      	bhi.n	8008802 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d10c      	bne.n	800880c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f910 	bl	8008a20 <USBD_CtlSendStatus>
      }
      break;
 8008800:	e004      	b.n	800880c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f840 	bl	800888a <USBD_CtlError>
      break;
 800880a:	e000      	b.n	800880e <USBD_ClrFeature+0x3c>
      break;
 800880c:	bf00      	nop
  }
}
 800880e:	bf00      	nop
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff fa17 	bl	8007c74 <SWAPBYTE>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff fa0a 	bl	8007c74 <SWAPBYTE>
 8008860:	4603      	mov	r3, r0
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff f9fd 	bl	8007c74 <SWAPBYTE>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	80da      	strh	r2, [r3, #6]
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008894:	2180      	movs	r1, #128	; 0x80
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fcea 	bl	8009270 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800889c:	2100      	movs	r1, #0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fce6 	bl	8009270 <USBD_LL_StallEP>
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d036      	beq.n	8008930 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088c6:	6938      	ldr	r0, [r7, #16]
 80088c8:	f000 f836 	bl	8008938 <USBD_GetLen>
 80088cc:	4603      	mov	r3, r0
 80088ce:	3301      	adds	r3, #1
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088da:	7dfb      	ldrb	r3, [r7, #23]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	4413      	add	r3, r2
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	3301      	adds	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	2203      	movs	r2, #3
 80088f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	3301      	adds	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088fc:	e013      	b.n	8008926 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	4413      	add	r3, r2
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3301      	adds	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
    idx++;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	3301      	adds	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	4413      	add	r3, r2
 800891c:	2200      	movs	r2, #0
 800891e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	3301      	adds	r3, #1
 8008924:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e7      	bne.n	80088fe <USBD_GetString+0x52>
 800892e:	e000      	b.n	8008932 <USBD_GetString+0x86>
    return;
 8008930:	bf00      	nop
  }
}
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008948:	e005      	b.n	8008956 <USBD_GetLen+0x1e>
  {
    len++;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	3301      	adds	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3301      	adds	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f5      	bne.n	800894a <USBD_GetLen+0x12>
  }

  return len;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2202      	movs	r2, #2
 800897c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	2100      	movs	r1, #0
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 fcf6 	bl	8009384 <USBD_LL_Transmit>

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	2100      	movs	r1, #0
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 fce5 	bl	8009384 <USBD_LL_Transmit>

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2203      	movs	r2, #3
 80089d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	2100      	movs	r1, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fce9 	bl	80093c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fcd8 	bl	80093c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a30:	2300      	movs	r3, #0
 8008a32:	2200      	movs	r2, #0
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fca4 	bl	8009384 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2205      	movs	r2, #5
 8008a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a56:	2300      	movs	r3, #0
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fcb2 	bl	80093c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008a70:	2200      	movs	r2, #0
 8008a72:	4912      	ldr	r1, [pc, #72]	; (8008abc <MX_USB_Device_Init+0x50>)
 8008a74:	4812      	ldr	r0, [pc, #72]	; (8008ac0 <MX_USB_Device_Init+0x54>)
 8008a76:	f7fe fd69 	bl	800754c <USBD_Init>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008a80:	f7f7 fcc6 	bl	8000410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008a84:	490f      	ldr	r1, [pc, #60]	; (8008ac4 <MX_USB_Device_Init+0x58>)
 8008a86:	480e      	ldr	r0, [pc, #56]	; (8008ac0 <MX_USB_Device_Init+0x54>)
 8008a88:	f7fe fd90 	bl	80075ac <USBD_RegisterClass>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008a92:	f7f7 fcbd 	bl	8000410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008a96:	490c      	ldr	r1, [pc, #48]	; (8008ac8 <MX_USB_Device_Init+0x5c>)
 8008a98:	4809      	ldr	r0, [pc, #36]	; (8008ac0 <MX_USB_Device_Init+0x54>)
 8008a9a:	f7fe fc87 	bl	80073ac <USBD_CDC_RegisterInterface>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008aa4:	f7f7 fcb4 	bl	8000410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <MX_USB_Device_Init+0x54>)
 8008aaa:	f7fe fdb5 	bl	8007618 <USBD_Start>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008ab4:	f7f7 fcac 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008ab8:	bf00      	nop
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200000f4 	.word	0x200000f4
 8008ac0:	200001ec 	.word	0x200001ec
 8008ac4:	20000060 	.word	0x20000060
 8008ac8:	200000e0 	.word	0x200000e0

08008acc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4905      	ldr	r1, [pc, #20]	; (8008ae8 <CDC_Init_FS+0x1c>)
 8008ad4:	4805      	ldr	r0, [pc, #20]	; (8008aec <CDC_Init_FS+0x20>)
 8008ad6:	f7fe fc83 	bl	80073e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ada:	4905      	ldr	r1, [pc, #20]	; (8008af0 <CDC_Init_FS+0x24>)
 8008adc:	4803      	ldr	r0, [pc, #12]	; (8008aec <CDC_Init_FS+0x20>)
 8008ade:	f7fe fca1 	bl	8007424 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ae2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000cc8 	.word	0x20000cc8
 8008aec:	200001ec 	.word	0x200001ec
 8008af0:	200004c8 	.word	0x200004c8

08008af4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008af8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2b23      	cmp	r3, #35	; 0x23
 8008b18:	d84a      	bhi.n	8008bb0 <CDC_Control_FS+0xac>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <CDC_Control_FS+0x1c>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008bb1 	.word	0x08008bb1
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bb1 	.word	0x08008bb1
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008bb1 	.word	0x08008bb1
 8008b34:	08008bb1 	.word	0x08008bb1
 8008b38:	08008bb1 	.word	0x08008bb1
 8008b3c:	08008bb1 	.word	0x08008bb1
 8008b40:	08008bb1 	.word	0x08008bb1
 8008b44:	08008bb1 	.word	0x08008bb1
 8008b48:	08008bb1 	.word	0x08008bb1
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008bb1 	.word	0x08008bb1
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008bb1 	.word	0x08008bb1
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008bb1 	.word	0x08008bb1
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb1 	.word	0x08008bb1
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb1 	.word	0x08008bb1
 8008b9c:	08008bb1 	.word	0x08008bb1
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bb1 	.word	0x08008bb1
 8008ba8:	08008bb1 	.word	0x08008bb1
 8008bac:	08008bb1 	.word	0x08008bb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bb0:	bf00      	nop
  }

  return (USBD_OK);
 8008bb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4805      	ldr	r0, [pc, #20]	; (8008be4 <CDC_Receive_FS+0x24>)
 8008bce:	f7fe fc29 	bl	8007424 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bd2:	4804      	ldr	r0, [pc, #16]	; (8008be4 <CDC_Receive_FS+0x24>)
 8008bd4:	f7fe fc84 	bl	80074e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200001ec 	.word	0x200001ec

08008be8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <CDC_Transmit_FS+0x48>)
 8008bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e00b      	b.n	8008c26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c0e:	887b      	ldrh	r3, [r7, #2]
 8008c10:	461a      	mov	r2, r3
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4806      	ldr	r0, [pc, #24]	; (8008c30 <CDC_Transmit_FS+0x48>)
 8008c16:	f7fe fbe3 	bl	80073e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c1a:	4805      	ldr	r0, [pc, #20]	; (8008c30 <CDC_Transmit_FS+0x48>)
 8008c1c:	f7fe fc20 	bl	8007460 <USBD_CDC_TransmitPacket>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	200001ec 	.word	0x200001ec

08008c34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6039      	str	r1, [r7, #0]
 8008c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2212      	movs	r2, #18
 8008c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008c6a:	4b03      	ldr	r3, [pc, #12]	; (8008c78 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	20000114 	.word	0x20000114

08008c7c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	6039      	str	r1, [r7, #0]
 8008c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c8e:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	20000128 	.word	0x20000128

08008ca0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4907      	ldr	r1, [pc, #28]	; (8008cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cb6:	4808      	ldr	r0, [pc, #32]	; (8008cd8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cb8:	f7ff fdf8 	bl	80088ac <USBD_GetString>
 8008cbc:	e004      	b.n	8008cc8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4904      	ldr	r1, [pc, #16]	; (8008cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cc2:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cc4:	f7ff fdf2 	bl	80088ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200014c8 	.word	0x200014c8
 8008cd8:	0800a508 	.word	0x0800a508

08008cdc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6039      	str	r1, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	4904      	ldr	r1, [pc, #16]	; (8008cfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008cec:	4804      	ldr	r0, [pc, #16]	; (8008d00 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008cee:	f7ff fddd 	bl	80088ac <USBD_GetString>
  return USBD_StrDesc;
 8008cf2:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200014c8 	.word	0x200014c8
 8008d00:	0800a520 	.word	0x0800a520

08008d04 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	221a      	movs	r2, #26
 8008d14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d16:	f000 f843 	bl	8008da0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d1a:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	2000012c 	.word	0x2000012c

08008d28 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	6039      	str	r1, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4907      	ldr	r1, [pc, #28]	; (8008d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d3e:	4808      	ldr	r0, [pc, #32]	; (8008d60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d40:	f7ff fdb4 	bl	80088ac <USBD_GetString>
 8008d44:	e004      	b.n	8008d50 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	4904      	ldr	r1, [pc, #16]	; (8008d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d4c:	f7ff fdae 	bl	80088ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200014c8 	.word	0x200014c8
 8008d60:	0800a534 	.word	0x0800a534

08008d64 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d105      	bne.n	8008d82 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	4907      	ldr	r1, [pc, #28]	; (8008d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d7a:	4808      	ldr	r0, [pc, #32]	; (8008d9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d7c:	f7ff fd96 	bl	80088ac <USBD_GetString>
 8008d80:	e004      	b.n	8008d8c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	4904      	ldr	r1, [pc, #16]	; (8008d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d86:	4805      	ldr	r0, [pc, #20]	; (8008d9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d88:	f7ff fd90 	bl	80088ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200014c8 	.word	0x200014c8
 8008d9c:	0800a540 	.word	0x0800a540

08008da0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <Get_SerialNum+0x44>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dac:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <Get_SerialNum+0x48>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <Get_SerialNum+0x4c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d009      	beq.n	8008dda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dc6:	2208      	movs	r2, #8
 8008dc8:	4909      	ldr	r1, [pc, #36]	; (8008df0 <Get_SerialNum+0x50>)
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 f814 	bl	8008df8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	4908      	ldr	r1, [pc, #32]	; (8008df4 <Get_SerialNum+0x54>)
 8008dd4:	68b8      	ldr	r0, [r7, #8]
 8008dd6:	f000 f80f 	bl	8008df8 <IntToUnicode>
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	1fff7590 	.word	0x1fff7590
 8008de8:	1fff7594 	.word	0x1fff7594
 8008dec:	1fff7598 	.word	0x1fff7598
 8008df0:	2000012e 	.word	0x2000012e
 8008df4:	2000013e 	.word	0x2000013e

08008df8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]
 8008e0e:	e027      	b.n	8008e60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0f1b      	lsrs	r3, r3, #28
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d80b      	bhi.n	8008e30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	0f1b      	lsrs	r3, r3, #28
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	440b      	add	r3, r1
 8008e28:	3230      	adds	r2, #48	; 0x30
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e00a      	b.n	8008e46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	0f1b      	lsrs	r3, r3, #28
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	440b      	add	r3, r1
 8008e40:	3237      	adds	r2, #55	; 0x37
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	3301      	adds	r3, #1
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	4413      	add	r3, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]
 8008e60:	7dfa      	ldrb	r2, [r7, #23]
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d3d3      	bcc.n	8008e10 <IntToUnicode+0x18>
  }
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <LL_AHB2_GRP1_EnableClock>:
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4013      	ands	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	bf00      	nop
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b09c      	sub	sp, #112	; 0x70
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ef4:	f107 030c 	add.w	r3, r7, #12
 8008ef8:	2250      	movs	r2, #80	; 0x50
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fb41 	bl	8009584 <memset>
  if(pcdHandle->Instance==USB)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a23      	ldr	r2, [pc, #140]	; (8008f94 <HAL_PCD_MspInit+0xb8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d13e      	bne.n	8008f8a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f10:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008f12:	2318      	movs	r3, #24
 8008f14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008f22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f26:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f32:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fb f82d 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008f44:	f7f7 fa64 	bl	8000410 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f48:	2001      	movs	r0, #1
 8008f4a:	f7ff ff94 	bl	8008e76 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f54:	2302      	movs	r3, #2
 8008f56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008f60:	230a      	movs	r3, #10
 8008f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f6e:	f7f7 fe0d 	bl	8000b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008f76:	f7ff ff97 	bl	8008ea8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	2014      	movs	r0, #20
 8008f80:	f7f7 fdcf 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008f84:	2014      	movs	r0, #20
 8008f86:	f7f7 fde6 	bl	8000b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f8a:	bf00      	nop
 8008f8c:	3770      	adds	r7, #112	; 0x70
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40006800 	.word	0x40006800

08008f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe fb7f 	bl	80076b2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f7fe fbb9 	bl	800775c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	440b      	add	r3, r1
 8009012:	333c      	adds	r3, #60	; 0x3c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe fc52 	bl	80078c2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fd8c 	bl	8007b52 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d001      	beq.n	800905a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009056:	f7f7 f9db 	bl	8000410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009060:	7bfa      	ldrb	r2, [r7, #15]
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fd30 	bl	8007aca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fcd8 	bl	8007a26 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fd2b 	bl	8007aea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <HAL_PCD_SuspendCallback+0x30>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	4a03      	ldr	r2, [pc, #12]	; (80090b0 <HAL_PCD_SuspendCallback+0x30>)
 80090a2:	f043 0306 	orr.w	r3, r3, #6
 80090a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c4:	4b08      	ldr	r3, [pc, #32]	; (80090e8 <HAL_PCD_ResumeCallback+0x34>)
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	4a07      	ldr	r2, [pc, #28]	; (80090e8 <HAL_PCD_ResumeCallback+0x34>)
 80090ca:	f023 0306 	bic.w	r3, r3, #6
 80090ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80090d0:	f000 f9fc 	bl	80094cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fd21 	bl	8007b22 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed00 	.word	0xe000ed00

080090ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80090f4:	4a2c      	ldr	r2, [pc, #176]	; (80091a8 <USBD_LL_Init+0xbc>)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a2a      	ldr	r2, [pc, #168]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009100:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009104:	f7f9 fc44 	bl	8002990 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009108:	4b27      	ldr	r3, [pc, #156]	; (80091a8 <USBD_LL_Init+0xbc>)
 800910a:	4a28      	ldr	r2, [pc, #160]	; (80091ac <USBD_LL_Init+0xc0>)
 800910c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800910e:	4b26      	ldr	r3, [pc, #152]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009110:	2208      	movs	r2, #8
 8009112:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009114:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009116:	2202      	movs	r2, #2
 8009118:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800911a:	4b23      	ldr	r3, [pc, #140]	; (80091a8 <USBD_LL_Init+0xbc>)
 800911c:	2202      	movs	r2, #2
 800911e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009120:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009122:	2200      	movs	r2, #0
 8009124:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009126:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009128:	2200      	movs	r2, #0
 800912a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800912c:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <USBD_LL_Init+0xbc>)
 800912e:	2200      	movs	r2, #0
 8009130:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <USBD_LL_Init+0xbc>)
 8009134:	2200      	movs	r2, #0
 8009136:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009138:	481b      	ldr	r0, [pc, #108]	; (80091a8 <USBD_LL_Init+0xbc>)
 800913a:	f7f7 fec7 	bl	8000ecc <HAL_PCD_Init>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009144:	f7f7 f964 	bl	8000410 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800914e:	2318      	movs	r3, #24
 8009150:	2200      	movs	r2, #0
 8009152:	2100      	movs	r1, #0
 8009154:	f7f9 fb90 	bl	8002878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800915e:	2358      	movs	r3, #88	; 0x58
 8009160:	2200      	movs	r2, #0
 8009162:	2180      	movs	r1, #128	; 0x80
 8009164:	f7f9 fb88 	bl	8002878 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800916e:	23c0      	movs	r3, #192	; 0xc0
 8009170:	2200      	movs	r2, #0
 8009172:	2181      	movs	r1, #129	; 0x81
 8009174:	f7f9 fb80 	bl	8002878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800917e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009182:	2200      	movs	r2, #0
 8009184:	2101      	movs	r1, #1
 8009186:	f7f9 fb77 	bl	8002878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009194:	2200      	movs	r2, #0
 8009196:	2182      	movs	r1, #130	; 0x82
 8009198:	f7f9 fb6e 	bl	8002878 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200016c8 	.word	0x200016c8
 80091ac:	40006800 	.word	0x40006800

080091b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 ff59 	bl	800107e <HAL_PCD_Start>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f980 	bl	80094d8 <USBD_Get_USB_Status>
 80091d8:	4603      	mov	r3, r0
 80091da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	4608      	mov	r0, r1
 80091f0:	4611      	mov	r1, r2
 80091f2:	461a      	mov	r2, r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	70fb      	strb	r3, [r7, #3]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70bb      	strb	r3, [r7, #2]
 80091fc:	4613      	mov	r3, r2
 80091fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800920e:	78bb      	ldrb	r3, [r7, #2]
 8009210:	883a      	ldrh	r2, [r7, #0]
 8009212:	78f9      	ldrb	r1, [r7, #3]
 8009214:	f7f8 f8a1 	bl	800135a <HAL_PCD_EP_Open>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f95a 	bl	80094d8 <USBD_Get_USB_Status>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009228:	7bbb      	ldrb	r3, [r7, #14]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924c:	78fa      	ldrb	r2, [r7, #3]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f7f8 f8df 	bl	8001414 <HAL_PCD_EP_Close>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f93b 	bl	80094d8 <USBD_Get_USB_Status>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009266:	7bbb      	ldrb	r3, [r7, #14]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7f8 f988 	bl	80015a4 <HAL_PCD_EP_SetStall>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f91c 	bl	80094d8 <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f8 f9bb 	bl	8001648 <HAL_PCD_EP_ClrStall>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8fd 	bl	80094d8 <USBD_Get_USB_Status>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da0c      	bge.n	8009322 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	440b      	add	r3, r1
 800931c:	3302      	adds	r3, #2
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	e00b      	b.n	800933a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	440b      	add	r3, r1
 8009334:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009338:	781b      	ldrb	r3, [r3, #0]
  }
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7f7 ffd3 	bl	8001310 <HAL_PCD_SetAddress>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f8b1 	bl	80094d8 <USBD_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937a:	7bbb      	ldrb	r3, [r7, #14]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093a2:	7af9      	ldrb	r1, [r7, #11]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	f7f8 f8c5 	bl	8001536 <HAL_PCD_EP_Transmit>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f890 	bl	80094d8 <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
 80093d2:	460b      	mov	r3, r1
 80093d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093e4:	7af9      	ldrb	r1, [r7, #11]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f7f8 f85b 	bl	80014a4 <HAL_PCD_EP_Receive>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f86f 	bl	80094d8 <USBD_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7f8 f871 	bl	8001506 <HAL_PCD_EP_GetRxCount>
 8009424:	4603      	mov	r3, r0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <HAL_PCDEx_LPM_Callback+0x18>
 8009442:	2b01      	cmp	r3, #1
 8009444:	d013      	beq.n	800946e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009446:	e023      	b.n	8009490 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d007      	beq.n	8009460 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009450:	f000 f83c 	bl	80094cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009454:	4b10      	ldr	r3, [pc, #64]	; (8009498 <HAL_PCDEx_LPM_Callback+0x68>)
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	4a0f      	ldr	r2, [pc, #60]	; (8009498 <HAL_PCDEx_LPM_Callback+0x68>)
 800945a:	f023 0306 	bic.w	r3, r3, #6
 800945e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fb5b 	bl	8007b22 <USBD_LL_Resume>
    break;
 800946c:	e010      	b.n	8009490 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fb38 	bl	8007aea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <HAL_PCDEx_LPM_Callback+0x68>)
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	4a04      	ldr	r2, [pc, #16]	; (8009498 <HAL_PCDEx_LPM_Callback+0x68>)
 8009488:	f043 0306 	orr.w	r3, r3, #6
 800948c:	6113      	str	r3, [r2, #16]
    break;
 800948e:	bf00      	nop
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	e000ed00 	.word	0xe000ed00

0800949c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094a4:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <USBD_static_malloc+0x18>)
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	200019bc 	.word	0x200019bc

080094b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80094d0:	f7f6 fece 	bl	8000270 <SystemClock_Config>
}
 80094d4:	bf00      	nop
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d817      	bhi.n	800951c <USBD_Get_USB_Status+0x44>
 80094ec:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <USBD_Get_USB_Status+0x1c>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	08009505 	.word	0x08009505
 80094f8:	0800950b 	.word	0x0800950b
 80094fc:	08009511 	.word	0x08009511
 8009500:	08009517 	.word	0x08009517
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
    break;
 8009508:	e00b      	b.n	8009522 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	73fb      	strb	r3, [r7, #15]
    break;
 800950e:	e008      	b.n	8009522 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009510:	2301      	movs	r3, #1
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	e005      	b.n	8009522 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009516:	2303      	movs	r3, #3
 8009518:	73fb      	strb	r3, [r7, #15]
    break;
 800951a:	e002      	b.n	8009522 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800951c:	2303      	movs	r3, #3
 800951e:	73fb      	strb	r3, [r7, #15]
    break;
 8009520:	bf00      	nop
  }
  return usb_status;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <__errno>:
 8009530:	4b01      	ldr	r3, [pc, #4]	; (8009538 <__errno+0x8>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20000148 	.word	0x20000148

0800953c <__libc_init_array>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4d0d      	ldr	r5, [pc, #52]	; (8009574 <__libc_init_array+0x38>)
 8009540:	4c0d      	ldr	r4, [pc, #52]	; (8009578 <__libc_init_array+0x3c>)
 8009542:	1b64      	subs	r4, r4, r5
 8009544:	10a4      	asrs	r4, r4, #2
 8009546:	2600      	movs	r6, #0
 8009548:	42a6      	cmp	r6, r4
 800954a:	d109      	bne.n	8009560 <__libc_init_array+0x24>
 800954c:	4d0b      	ldr	r5, [pc, #44]	; (800957c <__libc_init_array+0x40>)
 800954e:	4c0c      	ldr	r4, [pc, #48]	; (8009580 <__libc_init_array+0x44>)
 8009550:	f000 ffae 	bl	800a4b0 <_init>
 8009554:	1b64      	subs	r4, r4, r5
 8009556:	10a4      	asrs	r4, r4, #2
 8009558:	2600      	movs	r6, #0
 800955a:	42a6      	cmp	r6, r4
 800955c:	d105      	bne.n	800956a <__libc_init_array+0x2e>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f855 3b04 	ldr.w	r3, [r5], #4
 8009564:	4798      	blx	r3
 8009566:	3601      	adds	r6, #1
 8009568:	e7ee      	b.n	8009548 <__libc_init_array+0xc>
 800956a:	f855 3b04 	ldr.w	r3, [r5], #4
 800956e:	4798      	blx	r3
 8009570:	3601      	adds	r6, #1
 8009572:	e7f2      	b.n	800955a <__libc_init_array+0x1e>
 8009574:	0800a668 	.word	0x0800a668
 8009578:	0800a668 	.word	0x0800a668
 800957c:	0800a668 	.word	0x0800a668
 8009580:	0800a66c 	.word	0x0800a66c

08009584 <memset>:
 8009584:	4402      	add	r2, r0
 8009586:	4603      	mov	r3, r0
 8009588:	4293      	cmp	r3, r2
 800958a:	d100      	bne.n	800958e <memset+0xa>
 800958c:	4770      	bx	lr
 800958e:	f803 1b01 	strb.w	r1, [r3], #1
 8009592:	e7f9      	b.n	8009588 <memset+0x4>

08009594 <iprintf>:
 8009594:	b40f      	push	{r0, r1, r2, r3}
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <iprintf+0x2c>)
 8009598:	b513      	push	{r0, r1, r4, lr}
 800959a:	681c      	ldr	r4, [r3, #0]
 800959c:	b124      	cbz	r4, 80095a8 <iprintf+0x14>
 800959e:	69a3      	ldr	r3, [r4, #24]
 80095a0:	b913      	cbnz	r3, 80095a8 <iprintf+0x14>
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 f866 	bl	8009674 <__sinit>
 80095a8:	ab05      	add	r3, sp, #20
 80095aa:	9a04      	ldr	r2, [sp, #16]
 80095ac:	68a1      	ldr	r1, [r4, #8]
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 f9bd 	bl	8009930 <_vfiprintf_r>
 80095b6:	b002      	add	sp, #8
 80095b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095bc:	b004      	add	sp, #16
 80095be:	4770      	bx	lr
 80095c0:	20000148 	.word	0x20000148

080095c4 <std>:
 80095c4:	2300      	movs	r3, #0
 80095c6:	b510      	push	{r4, lr}
 80095c8:	4604      	mov	r4, r0
 80095ca:	e9c0 3300 	strd	r3, r3, [r0]
 80095ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095d2:	6083      	str	r3, [r0, #8]
 80095d4:	8181      	strh	r1, [r0, #12]
 80095d6:	6643      	str	r3, [r0, #100]	; 0x64
 80095d8:	81c2      	strh	r2, [r0, #14]
 80095da:	6183      	str	r3, [r0, #24]
 80095dc:	4619      	mov	r1, r3
 80095de:	2208      	movs	r2, #8
 80095e0:	305c      	adds	r0, #92	; 0x5c
 80095e2:	f7ff ffcf 	bl	8009584 <memset>
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <std+0x38>)
 80095e8:	6263      	str	r3, [r4, #36]	; 0x24
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <std+0x3c>)
 80095ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <std+0x40>)
 80095f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <std+0x44>)
 80095f4:	6224      	str	r4, [r4, #32]
 80095f6:	6323      	str	r3, [r4, #48]	; 0x30
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	bf00      	nop
 80095fc:	08009ed9 	.word	0x08009ed9
 8009600:	08009efb 	.word	0x08009efb
 8009604:	08009f33 	.word	0x08009f33
 8009608:	08009f57 	.word	0x08009f57

0800960c <_cleanup_r>:
 800960c:	4901      	ldr	r1, [pc, #4]	; (8009614 <_cleanup_r+0x8>)
 800960e:	f000 b8af 	b.w	8009770 <_fwalk_reent>
 8009612:	bf00      	nop
 8009614:	0800a231 	.word	0x0800a231

08009618 <__sfmoreglue>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	2268      	movs	r2, #104	; 0x68
 800961c:	1e4d      	subs	r5, r1, #1
 800961e:	4355      	muls	r5, r2
 8009620:	460e      	mov	r6, r1
 8009622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009626:	f000 f8e5 	bl	80097f4 <_malloc_r>
 800962a:	4604      	mov	r4, r0
 800962c:	b140      	cbz	r0, 8009640 <__sfmoreglue+0x28>
 800962e:	2100      	movs	r1, #0
 8009630:	e9c0 1600 	strd	r1, r6, [r0]
 8009634:	300c      	adds	r0, #12
 8009636:	60a0      	str	r0, [r4, #8]
 8009638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800963c:	f7ff ffa2 	bl	8009584 <memset>
 8009640:	4620      	mov	r0, r4
 8009642:	bd70      	pop	{r4, r5, r6, pc}

08009644 <__sfp_lock_acquire>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__sfp_lock_acquire+0x8>)
 8009646:	f000 b8b3 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20001bdd 	.word	0x20001bdd

08009650 <__sfp_lock_release>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sfp_lock_release+0x8>)
 8009652:	f000 b8ae 	b.w	80097b2 <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20001bdd 	.word	0x20001bdd

0800965c <__sinit_lock_acquire>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sinit_lock_acquire+0x8>)
 800965e:	f000 b8a7 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	20001bde 	.word	0x20001bde

08009668 <__sinit_lock_release>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sinit_lock_release+0x8>)
 800966a:	f000 b8a2 	b.w	80097b2 <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	20001bde 	.word	0x20001bde

08009674 <__sinit>:
 8009674:	b510      	push	{r4, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	f7ff fff0 	bl	800965c <__sinit_lock_acquire>
 800967c:	69a3      	ldr	r3, [r4, #24]
 800967e:	b11b      	cbz	r3, 8009688 <__sinit+0x14>
 8009680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009684:	f7ff bff0 	b.w	8009668 <__sinit_lock_release>
 8009688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800968c:	6523      	str	r3, [r4, #80]	; 0x50
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <__sinit+0x68>)
 8009690:	4a13      	ldr	r2, [pc, #76]	; (80096e0 <__sinit+0x6c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	62a2      	str	r2, [r4, #40]	; 0x28
 8009696:	42a3      	cmp	r3, r4
 8009698:	bf04      	itt	eq
 800969a:	2301      	moveq	r3, #1
 800969c:	61a3      	streq	r3, [r4, #24]
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 f820 	bl	80096e4 <__sfp>
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 f81c 	bl	80096e4 <__sfp>
 80096ac:	60a0      	str	r0, [r4, #8]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 f818 	bl	80096e4 <__sfp>
 80096b4:	2200      	movs	r2, #0
 80096b6:	60e0      	str	r0, [r4, #12]
 80096b8:	2104      	movs	r1, #4
 80096ba:	6860      	ldr	r0, [r4, #4]
 80096bc:	f7ff ff82 	bl	80095c4 <std>
 80096c0:	68a0      	ldr	r0, [r4, #8]
 80096c2:	2201      	movs	r2, #1
 80096c4:	2109      	movs	r1, #9
 80096c6:	f7ff ff7d 	bl	80095c4 <std>
 80096ca:	68e0      	ldr	r0, [r4, #12]
 80096cc:	2202      	movs	r2, #2
 80096ce:	2112      	movs	r1, #18
 80096d0:	f7ff ff78 	bl	80095c4 <std>
 80096d4:	2301      	movs	r3, #1
 80096d6:	61a3      	str	r3, [r4, #24]
 80096d8:	e7d2      	b.n	8009680 <__sinit+0xc>
 80096da:	bf00      	nop
 80096dc:	0800a5d0 	.word	0x0800a5d0
 80096e0:	0800960d 	.word	0x0800960d

080096e4 <__sfp>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	4607      	mov	r7, r0
 80096e8:	f7ff ffac 	bl	8009644 <__sfp_lock_acquire>
 80096ec:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <__sfp+0x84>)
 80096ee:	681e      	ldr	r6, [r3, #0]
 80096f0:	69b3      	ldr	r3, [r6, #24]
 80096f2:	b913      	cbnz	r3, 80096fa <__sfp+0x16>
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7ff ffbd 	bl	8009674 <__sinit>
 80096fa:	3648      	adds	r6, #72	; 0x48
 80096fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009700:	3b01      	subs	r3, #1
 8009702:	d503      	bpl.n	800970c <__sfp+0x28>
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	b30b      	cbz	r3, 800974c <__sfp+0x68>
 8009708:	6836      	ldr	r6, [r6, #0]
 800970a:	e7f7      	b.n	80096fc <__sfp+0x18>
 800970c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009710:	b9d5      	cbnz	r5, 8009748 <__sfp+0x64>
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <__sfp+0x88>)
 8009714:	60e3      	str	r3, [r4, #12]
 8009716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800971a:	6665      	str	r5, [r4, #100]	; 0x64
 800971c:	f000 f847 	bl	80097ae <__retarget_lock_init_recursive>
 8009720:	f7ff ff96 	bl	8009650 <__sfp_lock_release>
 8009724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800972c:	6025      	str	r5, [r4, #0]
 800972e:	61a5      	str	r5, [r4, #24]
 8009730:	2208      	movs	r2, #8
 8009732:	4629      	mov	r1, r5
 8009734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009738:	f7ff ff24 	bl	8009584 <memset>
 800973c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009744:	4620      	mov	r0, r4
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	3468      	adds	r4, #104	; 0x68
 800974a:	e7d9      	b.n	8009700 <__sfp+0x1c>
 800974c:	2104      	movs	r1, #4
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff ff62 	bl	8009618 <__sfmoreglue>
 8009754:	4604      	mov	r4, r0
 8009756:	6030      	str	r0, [r6, #0]
 8009758:	2800      	cmp	r0, #0
 800975a:	d1d5      	bne.n	8009708 <__sfp+0x24>
 800975c:	f7ff ff78 	bl	8009650 <__sfp_lock_release>
 8009760:	230c      	movs	r3, #12
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	e7ee      	b.n	8009744 <__sfp+0x60>
 8009766:	bf00      	nop
 8009768:	0800a5d0 	.word	0x0800a5d0
 800976c:	ffff0001 	.word	0xffff0001

08009770 <_fwalk_reent>:
 8009770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009774:	4606      	mov	r6, r0
 8009776:	4688      	mov	r8, r1
 8009778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800977c:	2700      	movs	r7, #0
 800977e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009782:	f1b9 0901 	subs.w	r9, r9, #1
 8009786:	d505      	bpl.n	8009794 <_fwalk_reent+0x24>
 8009788:	6824      	ldr	r4, [r4, #0]
 800978a:	2c00      	cmp	r4, #0
 800978c:	d1f7      	bne.n	800977e <_fwalk_reent+0xe>
 800978e:	4638      	mov	r0, r7
 8009790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009794:	89ab      	ldrh	r3, [r5, #12]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d907      	bls.n	80097aa <_fwalk_reent+0x3a>
 800979a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800979e:	3301      	adds	r3, #1
 80097a0:	d003      	beq.n	80097aa <_fwalk_reent+0x3a>
 80097a2:	4629      	mov	r1, r5
 80097a4:	4630      	mov	r0, r6
 80097a6:	47c0      	blx	r8
 80097a8:	4307      	orrs	r7, r0
 80097aa:	3568      	adds	r5, #104	; 0x68
 80097ac:	e7e9      	b.n	8009782 <_fwalk_reent+0x12>

080097ae <__retarget_lock_init_recursive>:
 80097ae:	4770      	bx	lr

080097b0 <__retarget_lock_acquire_recursive>:
 80097b0:	4770      	bx	lr

080097b2 <__retarget_lock_release_recursive>:
 80097b2:	4770      	bx	lr

080097b4 <sbrk_aligned>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	4e0e      	ldr	r6, [pc, #56]	; (80097f0 <sbrk_aligned+0x3c>)
 80097b8:	460c      	mov	r4, r1
 80097ba:	6831      	ldr	r1, [r6, #0]
 80097bc:	4605      	mov	r5, r0
 80097be:	b911      	cbnz	r1, 80097c6 <sbrk_aligned+0x12>
 80097c0:	f000 fb7a 	bl	8009eb8 <_sbrk_r>
 80097c4:	6030      	str	r0, [r6, #0]
 80097c6:	4621      	mov	r1, r4
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 fb75 	bl	8009eb8 <_sbrk_r>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d00a      	beq.n	80097e8 <sbrk_aligned+0x34>
 80097d2:	1cc4      	adds	r4, r0, #3
 80097d4:	f024 0403 	bic.w	r4, r4, #3
 80097d8:	42a0      	cmp	r0, r4
 80097da:	d007      	beq.n	80097ec <sbrk_aligned+0x38>
 80097dc:	1a21      	subs	r1, r4, r0
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 fb6a 	bl	8009eb8 <_sbrk_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d101      	bne.n	80097ec <sbrk_aligned+0x38>
 80097e8:	f04f 34ff 	mov.w	r4, #4294967295
 80097ec:	4620      	mov	r0, r4
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	20001be4 	.word	0x20001be4

080097f4 <_malloc_r>:
 80097f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f8:	1ccd      	adds	r5, r1, #3
 80097fa:	f025 0503 	bic.w	r5, r5, #3
 80097fe:	3508      	adds	r5, #8
 8009800:	2d0c      	cmp	r5, #12
 8009802:	bf38      	it	cc
 8009804:	250c      	movcc	r5, #12
 8009806:	2d00      	cmp	r5, #0
 8009808:	4607      	mov	r7, r0
 800980a:	db01      	blt.n	8009810 <_malloc_r+0x1c>
 800980c:	42a9      	cmp	r1, r5
 800980e:	d905      	bls.n	800981c <_malloc_r+0x28>
 8009810:	230c      	movs	r3, #12
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	2600      	movs	r6, #0
 8009816:	4630      	mov	r0, r6
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	4e2e      	ldr	r6, [pc, #184]	; (80098d8 <_malloc_r+0xe4>)
 800981e:	f000 fdbb 	bl	800a398 <__malloc_lock>
 8009822:	6833      	ldr	r3, [r6, #0]
 8009824:	461c      	mov	r4, r3
 8009826:	bb34      	cbnz	r4, 8009876 <_malloc_r+0x82>
 8009828:	4629      	mov	r1, r5
 800982a:	4638      	mov	r0, r7
 800982c:	f7ff ffc2 	bl	80097b4 <sbrk_aligned>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	4604      	mov	r4, r0
 8009834:	d14d      	bne.n	80098d2 <_malloc_r+0xde>
 8009836:	6834      	ldr	r4, [r6, #0]
 8009838:	4626      	mov	r6, r4
 800983a:	2e00      	cmp	r6, #0
 800983c:	d140      	bne.n	80098c0 <_malloc_r+0xcc>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	4631      	mov	r1, r6
 8009842:	4638      	mov	r0, r7
 8009844:	eb04 0803 	add.w	r8, r4, r3
 8009848:	f000 fb36 	bl	8009eb8 <_sbrk_r>
 800984c:	4580      	cmp	r8, r0
 800984e:	d13a      	bne.n	80098c6 <_malloc_r+0xd2>
 8009850:	6821      	ldr	r1, [r4, #0]
 8009852:	3503      	adds	r5, #3
 8009854:	1a6d      	subs	r5, r5, r1
 8009856:	f025 0503 	bic.w	r5, r5, #3
 800985a:	3508      	adds	r5, #8
 800985c:	2d0c      	cmp	r5, #12
 800985e:	bf38      	it	cc
 8009860:	250c      	movcc	r5, #12
 8009862:	4629      	mov	r1, r5
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff ffa5 	bl	80097b4 <sbrk_aligned>
 800986a:	3001      	adds	r0, #1
 800986c:	d02b      	beq.n	80098c6 <_malloc_r+0xd2>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	442b      	add	r3, r5
 8009872:	6023      	str	r3, [r4, #0]
 8009874:	e00e      	b.n	8009894 <_malloc_r+0xa0>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	1b52      	subs	r2, r2, r5
 800987a:	d41e      	bmi.n	80098ba <_malloc_r+0xc6>
 800987c:	2a0b      	cmp	r2, #11
 800987e:	d916      	bls.n	80098ae <_malloc_r+0xba>
 8009880:	1961      	adds	r1, r4, r5
 8009882:	42a3      	cmp	r3, r4
 8009884:	6025      	str	r5, [r4, #0]
 8009886:	bf18      	it	ne
 8009888:	6059      	strne	r1, [r3, #4]
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	bf08      	it	eq
 800988e:	6031      	streq	r1, [r6, #0]
 8009890:	5162      	str	r2, [r4, r5]
 8009892:	604b      	str	r3, [r1, #4]
 8009894:	4638      	mov	r0, r7
 8009896:	f104 060b 	add.w	r6, r4, #11
 800989a:	f000 fd83 	bl	800a3a4 <__malloc_unlock>
 800989e:	f026 0607 	bic.w	r6, r6, #7
 80098a2:	1d23      	adds	r3, r4, #4
 80098a4:	1af2      	subs	r2, r6, r3
 80098a6:	d0b6      	beq.n	8009816 <_malloc_r+0x22>
 80098a8:	1b9b      	subs	r3, r3, r6
 80098aa:	50a3      	str	r3, [r4, r2]
 80098ac:	e7b3      	b.n	8009816 <_malloc_r+0x22>
 80098ae:	6862      	ldr	r2, [r4, #4]
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	bf0c      	ite	eq
 80098b4:	6032      	streq	r2, [r6, #0]
 80098b6:	605a      	strne	r2, [r3, #4]
 80098b8:	e7ec      	b.n	8009894 <_malloc_r+0xa0>
 80098ba:	4623      	mov	r3, r4
 80098bc:	6864      	ldr	r4, [r4, #4]
 80098be:	e7b2      	b.n	8009826 <_malloc_r+0x32>
 80098c0:	4634      	mov	r4, r6
 80098c2:	6876      	ldr	r6, [r6, #4]
 80098c4:	e7b9      	b.n	800983a <_malloc_r+0x46>
 80098c6:	230c      	movs	r3, #12
 80098c8:	603b      	str	r3, [r7, #0]
 80098ca:	4638      	mov	r0, r7
 80098cc:	f000 fd6a 	bl	800a3a4 <__malloc_unlock>
 80098d0:	e7a1      	b.n	8009816 <_malloc_r+0x22>
 80098d2:	6025      	str	r5, [r4, #0]
 80098d4:	e7de      	b.n	8009894 <_malloc_r+0xa0>
 80098d6:	bf00      	nop
 80098d8:	20001be0 	.word	0x20001be0

080098dc <__sfputc_r>:
 80098dc:	6893      	ldr	r3, [r2, #8]
 80098de:	3b01      	subs	r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	b410      	push	{r4}
 80098e4:	6093      	str	r3, [r2, #8]
 80098e6:	da08      	bge.n	80098fa <__sfputc_r+0x1e>
 80098e8:	6994      	ldr	r4, [r2, #24]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	db01      	blt.n	80098f2 <__sfputc_r+0x16>
 80098ee:	290a      	cmp	r1, #10
 80098f0:	d103      	bne.n	80098fa <__sfputc_r+0x1e>
 80098f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f6:	f000 bb33 	b.w	8009f60 <__swbuf_r>
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	1c58      	adds	r0, r3, #1
 80098fe:	6010      	str	r0, [r2, #0]
 8009900:	7019      	strb	r1, [r3, #0]
 8009902:	4608      	mov	r0, r1
 8009904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009908:	4770      	bx	lr

0800990a <__sfputs_r>:
 800990a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	4614      	mov	r4, r2
 8009912:	18d5      	adds	r5, r2, r3
 8009914:	42ac      	cmp	r4, r5
 8009916:	d101      	bne.n	800991c <__sfputs_r+0x12>
 8009918:	2000      	movs	r0, #0
 800991a:	e007      	b.n	800992c <__sfputs_r+0x22>
 800991c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009920:	463a      	mov	r2, r7
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffda 	bl	80098dc <__sfputc_r>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d1f3      	bne.n	8009914 <__sfputs_r+0xa>
 800992c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009930 <_vfiprintf_r>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	460d      	mov	r5, r1
 8009936:	b09d      	sub	sp, #116	; 0x74
 8009938:	4614      	mov	r4, r2
 800993a:	4698      	mov	r8, r3
 800993c:	4606      	mov	r6, r0
 800993e:	b118      	cbz	r0, 8009948 <_vfiprintf_r+0x18>
 8009940:	6983      	ldr	r3, [r0, #24]
 8009942:	b90b      	cbnz	r3, 8009948 <_vfiprintf_r+0x18>
 8009944:	f7ff fe96 	bl	8009674 <__sinit>
 8009948:	4b89      	ldr	r3, [pc, #548]	; (8009b70 <_vfiprintf_r+0x240>)
 800994a:	429d      	cmp	r5, r3
 800994c:	d11b      	bne.n	8009986 <_vfiprintf_r+0x56>
 800994e:	6875      	ldr	r5, [r6, #4]
 8009950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009952:	07d9      	lsls	r1, r3, #31
 8009954:	d405      	bmi.n	8009962 <_vfiprintf_r+0x32>
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	059a      	lsls	r2, r3, #22
 800995a:	d402      	bmi.n	8009962 <_vfiprintf_r+0x32>
 800995c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800995e:	f7ff ff27 	bl	80097b0 <__retarget_lock_acquire_recursive>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	071b      	lsls	r3, r3, #28
 8009966:	d501      	bpl.n	800996c <_vfiprintf_r+0x3c>
 8009968:	692b      	ldr	r3, [r5, #16]
 800996a:	b9eb      	cbnz	r3, 80099a8 <_vfiprintf_r+0x78>
 800996c:	4629      	mov	r1, r5
 800996e:	4630      	mov	r0, r6
 8009970:	f000 fb5a 	bl	800a028 <__swsetup_r>
 8009974:	b1c0      	cbz	r0, 80099a8 <_vfiprintf_r+0x78>
 8009976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009978:	07dc      	lsls	r4, r3, #31
 800997a:	d50e      	bpl.n	800999a <_vfiprintf_r+0x6a>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	b01d      	add	sp, #116	; 0x74
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	4b7b      	ldr	r3, [pc, #492]	; (8009b74 <_vfiprintf_r+0x244>)
 8009988:	429d      	cmp	r5, r3
 800998a:	d101      	bne.n	8009990 <_vfiprintf_r+0x60>
 800998c:	68b5      	ldr	r5, [r6, #8]
 800998e:	e7df      	b.n	8009950 <_vfiprintf_r+0x20>
 8009990:	4b79      	ldr	r3, [pc, #484]	; (8009b78 <_vfiprintf_r+0x248>)
 8009992:	429d      	cmp	r5, r3
 8009994:	bf08      	it	eq
 8009996:	68f5      	ldreq	r5, [r6, #12]
 8009998:	e7da      	b.n	8009950 <_vfiprintf_r+0x20>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	0598      	lsls	r0, r3, #22
 800999e:	d4ed      	bmi.n	800997c <_vfiprintf_r+0x4c>
 80099a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099a2:	f7ff ff06 	bl	80097b2 <__retarget_lock_release_recursive>
 80099a6:	e7e9      	b.n	800997c <_vfiprintf_r+0x4c>
 80099a8:	2300      	movs	r3, #0
 80099aa:	9309      	str	r3, [sp, #36]	; 0x24
 80099ac:	2320      	movs	r3, #32
 80099ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b6:	2330      	movs	r3, #48	; 0x30
 80099b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b7c <_vfiprintf_r+0x24c>
 80099bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099c0:	f04f 0901 	mov.w	r9, #1
 80099c4:	4623      	mov	r3, r4
 80099c6:	469a      	mov	sl, r3
 80099c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099cc:	b10a      	cbz	r2, 80099d2 <_vfiprintf_r+0xa2>
 80099ce:	2a25      	cmp	r2, #37	; 0x25
 80099d0:	d1f9      	bne.n	80099c6 <_vfiprintf_r+0x96>
 80099d2:	ebba 0b04 	subs.w	fp, sl, r4
 80099d6:	d00b      	beq.n	80099f0 <_vfiprintf_r+0xc0>
 80099d8:	465b      	mov	r3, fp
 80099da:	4622      	mov	r2, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	4630      	mov	r0, r6
 80099e0:	f7ff ff93 	bl	800990a <__sfputs_r>
 80099e4:	3001      	adds	r0, #1
 80099e6:	f000 80aa 	beq.w	8009b3e <_vfiprintf_r+0x20e>
 80099ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ec:	445a      	add	r2, fp
 80099ee:	9209      	str	r2, [sp, #36]	; 0x24
 80099f0:	f89a 3000 	ldrb.w	r3, [sl]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80a2 	beq.w	8009b3e <_vfiprintf_r+0x20e>
 80099fa:	2300      	movs	r3, #0
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a04:	f10a 0a01 	add.w	sl, sl, #1
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	9307      	str	r3, [sp, #28]
 8009a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a10:	931a      	str	r3, [sp, #104]	; 0x68
 8009a12:	4654      	mov	r4, sl
 8009a14:	2205      	movs	r2, #5
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	4858      	ldr	r0, [pc, #352]	; (8009b7c <_vfiprintf_r+0x24c>)
 8009a1c:	f7f6 fbb0 	bl	8000180 <memchr>
 8009a20:	9a04      	ldr	r2, [sp, #16]
 8009a22:	b9d8      	cbnz	r0, 8009a5c <_vfiprintf_r+0x12c>
 8009a24:	06d1      	lsls	r1, r2, #27
 8009a26:	bf44      	itt	mi
 8009a28:	2320      	movmi	r3, #32
 8009a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2e:	0713      	lsls	r3, r2, #28
 8009a30:	bf44      	itt	mi
 8009a32:	232b      	movmi	r3, #43	; 0x2b
 8009a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a38:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a3e:	d015      	beq.n	8009a6c <_vfiprintf_r+0x13c>
 8009a40:	9a07      	ldr	r2, [sp, #28]
 8009a42:	4654      	mov	r4, sl
 8009a44:	2000      	movs	r0, #0
 8009a46:	f04f 0c0a 	mov.w	ip, #10
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a50:	3b30      	subs	r3, #48	; 0x30
 8009a52:	2b09      	cmp	r3, #9
 8009a54:	d94e      	bls.n	8009af4 <_vfiprintf_r+0x1c4>
 8009a56:	b1b0      	cbz	r0, 8009a86 <_vfiprintf_r+0x156>
 8009a58:	9207      	str	r2, [sp, #28]
 8009a5a:	e014      	b.n	8009a86 <_vfiprintf_r+0x156>
 8009a5c:	eba0 0308 	sub.w	r3, r0, r8
 8009a60:	fa09 f303 	lsl.w	r3, r9, r3
 8009a64:	4313      	orrs	r3, r2
 8009a66:	9304      	str	r3, [sp, #16]
 8009a68:	46a2      	mov	sl, r4
 8009a6a:	e7d2      	b.n	8009a12 <_vfiprintf_r+0xe2>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	1d19      	adds	r1, r3, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	9103      	str	r1, [sp, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bfbb      	ittet	lt
 8009a78:	425b      	neglt	r3, r3
 8009a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7e:	9307      	strge	r3, [sp, #28]
 8009a80:	9307      	strlt	r3, [sp, #28]
 8009a82:	bfb8      	it	lt
 8009a84:	9204      	strlt	r2, [sp, #16]
 8009a86:	7823      	ldrb	r3, [r4, #0]
 8009a88:	2b2e      	cmp	r3, #46	; 0x2e
 8009a8a:	d10c      	bne.n	8009aa6 <_vfiprintf_r+0x176>
 8009a8c:	7863      	ldrb	r3, [r4, #1]
 8009a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a90:	d135      	bne.n	8009afe <_vfiprintf_r+0x1ce>
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	1d1a      	adds	r2, r3, #4
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	9203      	str	r2, [sp, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	bfb8      	it	lt
 8009a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aa2:	3402      	adds	r4, #2
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b8c <_vfiprintf_r+0x25c>
 8009aaa:	7821      	ldrb	r1, [r4, #0]
 8009aac:	2203      	movs	r2, #3
 8009aae:	4650      	mov	r0, sl
 8009ab0:	f7f6 fb66 	bl	8000180 <memchr>
 8009ab4:	b140      	cbz	r0, 8009ac8 <_vfiprintf_r+0x198>
 8009ab6:	2340      	movs	r3, #64	; 0x40
 8009ab8:	eba0 000a 	sub.w	r0, r0, sl
 8009abc:	fa03 f000 	lsl.w	r0, r3, r0
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	4303      	orrs	r3, r0
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	9304      	str	r3, [sp, #16]
 8009ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009acc:	482c      	ldr	r0, [pc, #176]	; (8009b80 <_vfiprintf_r+0x250>)
 8009ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ad2:	2206      	movs	r2, #6
 8009ad4:	f7f6 fb54 	bl	8000180 <memchr>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d03f      	beq.n	8009b5c <_vfiprintf_r+0x22c>
 8009adc:	4b29      	ldr	r3, [pc, #164]	; (8009b84 <_vfiprintf_r+0x254>)
 8009ade:	bb1b      	cbnz	r3, 8009b28 <_vfiprintf_r+0x1f8>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	3307      	adds	r3, #7
 8009ae4:	f023 0307 	bic.w	r3, r3, #7
 8009ae8:	3308      	adds	r3, #8
 8009aea:	9303      	str	r3, [sp, #12]
 8009aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aee:	443b      	add	r3, r7
 8009af0:	9309      	str	r3, [sp, #36]	; 0x24
 8009af2:	e767      	b.n	80099c4 <_vfiprintf_r+0x94>
 8009af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009af8:	460c      	mov	r4, r1
 8009afa:	2001      	movs	r0, #1
 8009afc:	e7a5      	b.n	8009a4a <_vfiprintf_r+0x11a>
 8009afe:	2300      	movs	r3, #0
 8009b00:	3401      	adds	r4, #1
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	4619      	mov	r1, r3
 8009b06:	f04f 0c0a 	mov.w	ip, #10
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b10:	3a30      	subs	r2, #48	; 0x30
 8009b12:	2a09      	cmp	r2, #9
 8009b14:	d903      	bls.n	8009b1e <_vfiprintf_r+0x1ee>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0c5      	beq.n	8009aa6 <_vfiprintf_r+0x176>
 8009b1a:	9105      	str	r1, [sp, #20]
 8009b1c:	e7c3      	b.n	8009aa6 <_vfiprintf_r+0x176>
 8009b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b22:	4604      	mov	r4, r0
 8009b24:	2301      	movs	r3, #1
 8009b26:	e7f0      	b.n	8009b0a <_vfiprintf_r+0x1da>
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <_vfiprintf_r+0x258>)
 8009b30:	a904      	add	r1, sp, #16
 8009b32:	4630      	mov	r0, r6
 8009b34:	f3af 8000 	nop.w
 8009b38:	4607      	mov	r7, r0
 8009b3a:	1c78      	adds	r0, r7, #1
 8009b3c:	d1d6      	bne.n	8009aec <_vfiprintf_r+0x1bc>
 8009b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b40:	07d9      	lsls	r1, r3, #31
 8009b42:	d405      	bmi.n	8009b50 <_vfiprintf_r+0x220>
 8009b44:	89ab      	ldrh	r3, [r5, #12]
 8009b46:	059a      	lsls	r2, r3, #22
 8009b48:	d402      	bmi.n	8009b50 <_vfiprintf_r+0x220>
 8009b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4c:	f7ff fe31 	bl	80097b2 <__retarget_lock_release_recursive>
 8009b50:	89ab      	ldrh	r3, [r5, #12]
 8009b52:	065b      	lsls	r3, r3, #25
 8009b54:	f53f af12 	bmi.w	800997c <_vfiprintf_r+0x4c>
 8009b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b5a:	e711      	b.n	8009980 <_vfiprintf_r+0x50>
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <_vfiprintf_r+0x258>)
 8009b64:	a904      	add	r1, sp, #16
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 f880 	bl	8009c6c <_printf_i>
 8009b6c:	e7e4      	b.n	8009b38 <_vfiprintf_r+0x208>
 8009b6e:	bf00      	nop
 8009b70:	0800a5f4 	.word	0x0800a5f4
 8009b74:	0800a614 	.word	0x0800a614
 8009b78:	0800a5d4 	.word	0x0800a5d4
 8009b7c:	0800a634 	.word	0x0800a634
 8009b80:	0800a63e 	.word	0x0800a63e
 8009b84:	00000000 	.word	0x00000000
 8009b88:	0800990b 	.word	0x0800990b
 8009b8c:	0800a63a 	.word	0x0800a63a

08009b90 <_printf_common>:
 8009b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	4616      	mov	r6, r2
 8009b96:	4699      	mov	r9, r3
 8009b98:	688a      	ldr	r2, [r1, #8]
 8009b9a:	690b      	ldr	r3, [r1, #16]
 8009b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	bfb8      	it	lt
 8009ba4:	4613      	movlt	r3, r2
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bac:	4607      	mov	r7, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	b10a      	cbz	r2, 8009bb6 <_printf_common+0x26>
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	0699      	lsls	r1, r3, #26
 8009bba:	bf42      	ittt	mi
 8009bbc:	6833      	ldrmi	r3, [r6, #0]
 8009bbe:	3302      	addmi	r3, #2
 8009bc0:	6033      	strmi	r3, [r6, #0]
 8009bc2:	6825      	ldr	r5, [r4, #0]
 8009bc4:	f015 0506 	ands.w	r5, r5, #6
 8009bc8:	d106      	bne.n	8009bd8 <_printf_common+0x48>
 8009bca:	f104 0a19 	add.w	sl, r4, #25
 8009bce:	68e3      	ldr	r3, [r4, #12]
 8009bd0:	6832      	ldr	r2, [r6, #0]
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	dc26      	bgt.n	8009c26 <_printf_common+0x96>
 8009bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bdc:	1e13      	subs	r3, r2, #0
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	bf18      	it	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	0692      	lsls	r2, r2, #26
 8009be6:	d42b      	bmi.n	8009c40 <_printf_common+0xb0>
 8009be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bec:	4649      	mov	r1, r9
 8009bee:	4638      	mov	r0, r7
 8009bf0:	47c0      	blx	r8
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d01e      	beq.n	8009c34 <_printf_common+0xa4>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	68e5      	ldr	r5, [r4, #12]
 8009bfa:	6832      	ldr	r2, [r6, #0]
 8009bfc:	f003 0306 	and.w	r3, r3, #6
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	bf08      	it	eq
 8009c04:	1aad      	subeq	r5, r5, r2
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	bf0c      	ite	eq
 8009c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c10:	2500      	movne	r5, #0
 8009c12:	4293      	cmp	r3, r2
 8009c14:	bfc4      	itt	gt
 8009c16:	1a9b      	subgt	r3, r3, r2
 8009c18:	18ed      	addgt	r5, r5, r3
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	341a      	adds	r4, #26
 8009c1e:	42b5      	cmp	r5, r6
 8009c20:	d11a      	bne.n	8009c58 <_printf_common+0xc8>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e008      	b.n	8009c38 <_printf_common+0xa8>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4652      	mov	r2, sl
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	47c0      	blx	r8
 8009c30:	3001      	adds	r0, #1
 8009c32:	d103      	bne.n	8009c3c <_printf_common+0xac>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	e7c6      	b.n	8009bce <_printf_common+0x3e>
 8009c40:	18e1      	adds	r1, r4, r3
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	2030      	movs	r0, #48	; 0x30
 8009c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c4a:	4422      	add	r2, r4
 8009c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c54:	3302      	adds	r3, #2
 8009c56:	e7c7      	b.n	8009be8 <_printf_common+0x58>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d0e6      	beq.n	8009c34 <_printf_common+0xa4>
 8009c66:	3601      	adds	r6, #1
 8009c68:	e7d9      	b.n	8009c1e <_printf_common+0x8e>
	...

08009c6c <_printf_i>:
 8009c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	7e0f      	ldrb	r7, [r1, #24]
 8009c72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c74:	2f78      	cmp	r7, #120	; 0x78
 8009c76:	4691      	mov	r9, r2
 8009c78:	4680      	mov	r8, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	469a      	mov	sl, r3
 8009c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c82:	d807      	bhi.n	8009c94 <_printf_i+0x28>
 8009c84:	2f62      	cmp	r7, #98	; 0x62
 8009c86:	d80a      	bhi.n	8009c9e <_printf_i+0x32>
 8009c88:	2f00      	cmp	r7, #0
 8009c8a:	f000 80d8 	beq.w	8009e3e <_printf_i+0x1d2>
 8009c8e:	2f58      	cmp	r7, #88	; 0x58
 8009c90:	f000 80a3 	beq.w	8009dda <_printf_i+0x16e>
 8009c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c9c:	e03a      	b.n	8009d14 <_printf_i+0xa8>
 8009c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ca2:	2b15      	cmp	r3, #21
 8009ca4:	d8f6      	bhi.n	8009c94 <_printf_i+0x28>
 8009ca6:	a101      	add	r1, pc, #4	; (adr r1, 8009cac <_printf_i+0x40>)
 8009ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cac:	08009d05 	.word	0x08009d05
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009c95 	.word	0x08009c95
 8009cb8:	08009c95 	.word	0x08009c95
 8009cbc:	08009c95 	.word	0x08009c95
 8009cc0:	08009c95 	.word	0x08009c95
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009c95 	.word	0x08009c95
 8009ccc:	08009c95 	.word	0x08009c95
 8009cd0:	08009c95 	.word	0x08009c95
 8009cd4:	08009c95 	.word	0x08009c95
 8009cd8:	08009e25 	.word	0x08009e25
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009e07 	.word	0x08009e07
 8009ce4:	08009c95 	.word	0x08009c95
 8009ce8:	08009c95 	.word	0x08009c95
 8009cec:	08009e47 	.word	0x08009e47
 8009cf0:	08009c95 	.word	0x08009c95
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009c95 	.word	0x08009c95
 8009cfc:	08009c95 	.word	0x08009c95
 8009d00:	08009e0f 	.word	0x08009e0f
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	1d1a      	adds	r2, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d14:	2301      	movs	r3, #1
 8009d16:	e0a3      	b.n	8009e60 <_printf_i+0x1f4>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	0606      	lsls	r6, r0, #24
 8009d1e:	f101 0304 	add.w	r3, r1, #4
 8009d22:	d50a      	bpl.n	8009d3a <_printf_i+0xce>
 8009d24:	680e      	ldr	r6, [r1, #0]
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	2e00      	cmp	r6, #0
 8009d2a:	da03      	bge.n	8009d34 <_printf_i+0xc8>
 8009d2c:	232d      	movs	r3, #45	; 0x2d
 8009d2e:	4276      	negs	r6, r6
 8009d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d34:	485e      	ldr	r0, [pc, #376]	; (8009eb0 <_printf_i+0x244>)
 8009d36:	230a      	movs	r3, #10
 8009d38:	e019      	b.n	8009d6e <_printf_i+0x102>
 8009d3a:	680e      	ldr	r6, [r1, #0]
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d42:	bf18      	it	ne
 8009d44:	b236      	sxthne	r6, r6
 8009d46:	e7ef      	b.n	8009d28 <_printf_i+0xbc>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	1d19      	adds	r1, r3, #4
 8009d4e:	6029      	str	r1, [r5, #0]
 8009d50:	0601      	lsls	r1, r0, #24
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0xec>
 8009d54:	681e      	ldr	r6, [r3, #0]
 8009d56:	e002      	b.n	8009d5e <_printf_i+0xf2>
 8009d58:	0646      	lsls	r6, r0, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0xe8>
 8009d5c:	881e      	ldrh	r6, [r3, #0]
 8009d5e:	4854      	ldr	r0, [pc, #336]	; (8009eb0 <_printf_i+0x244>)
 8009d60:	2f6f      	cmp	r7, #111	; 0x6f
 8009d62:	bf0c      	ite	eq
 8009d64:	2308      	moveq	r3, #8
 8009d66:	230a      	movne	r3, #10
 8009d68:	2100      	movs	r1, #0
 8009d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d6e:	6865      	ldr	r5, [r4, #4]
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	bfa2      	ittt	ge
 8009d76:	6821      	ldrge	r1, [r4, #0]
 8009d78:	f021 0104 	bicge.w	r1, r1, #4
 8009d7c:	6021      	strge	r1, [r4, #0]
 8009d7e:	b90e      	cbnz	r6, 8009d84 <_printf_i+0x118>
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	d04d      	beq.n	8009e20 <_printf_i+0x1b4>
 8009d84:	4615      	mov	r5, r2
 8009d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d8e:	5dc7      	ldrb	r7, [r0, r7]
 8009d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d94:	4637      	mov	r7, r6
 8009d96:	42bb      	cmp	r3, r7
 8009d98:	460e      	mov	r6, r1
 8009d9a:	d9f4      	bls.n	8009d86 <_printf_i+0x11a>
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d10b      	bne.n	8009db8 <_printf_i+0x14c>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	07de      	lsls	r6, r3, #31
 8009da4:	d508      	bpl.n	8009db8 <_printf_i+0x14c>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	6861      	ldr	r1, [r4, #4]
 8009daa:	4299      	cmp	r1, r3
 8009dac:	bfde      	ittt	le
 8009dae:	2330      	movle	r3, #48	; 0x30
 8009db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009db8:	1b52      	subs	r2, r2, r5
 8009dba:	6122      	str	r2, [r4, #16]
 8009dbc:	f8cd a000 	str.w	sl, [sp]
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	aa03      	add	r2, sp, #12
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7ff fee2 	bl	8009b90 <_printf_common>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d14c      	bne.n	8009e6a <_printf_i+0x1fe>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	b004      	add	sp, #16
 8009dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dda:	4835      	ldr	r0, [pc, #212]	; (8009eb0 <_printf_i+0x244>)
 8009ddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009de0:	6829      	ldr	r1, [r5, #0]
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009de8:	6029      	str	r1, [r5, #0]
 8009dea:	061d      	lsls	r5, r3, #24
 8009dec:	d514      	bpl.n	8009e18 <_printf_i+0x1ac>
 8009dee:	07df      	lsls	r7, r3, #31
 8009df0:	bf44      	itt	mi
 8009df2:	f043 0320 	orrmi.w	r3, r3, #32
 8009df6:	6023      	strmi	r3, [r4, #0]
 8009df8:	b91e      	cbnz	r6, 8009e02 <_printf_i+0x196>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f023 0320 	bic.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2310      	movs	r3, #16
 8009e04:	e7b0      	b.n	8009d68 <_printf_i+0xfc>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	f043 0320 	orr.w	r3, r3, #32
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	2378      	movs	r3, #120	; 0x78
 8009e10:	4828      	ldr	r0, [pc, #160]	; (8009eb4 <_printf_i+0x248>)
 8009e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e16:	e7e3      	b.n	8009de0 <_printf_i+0x174>
 8009e18:	0659      	lsls	r1, r3, #25
 8009e1a:	bf48      	it	mi
 8009e1c:	b2b6      	uxthmi	r6, r6
 8009e1e:	e7e6      	b.n	8009dee <_printf_i+0x182>
 8009e20:	4615      	mov	r5, r2
 8009e22:	e7bb      	b.n	8009d9c <_printf_i+0x130>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	6826      	ldr	r6, [r4, #0]
 8009e28:	6961      	ldr	r1, [r4, #20]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6028      	str	r0, [r5, #0]
 8009e2e:	0635      	lsls	r5, r6, #24
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x1cc>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1d2>
 8009e38:	0670      	lsls	r0, r6, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x1c8>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	4615      	mov	r5, r2
 8009e44:	e7ba      	b.n	8009dbc <_printf_i+0x150>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	681d      	ldr	r5, [r3, #0]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 f994 	bl	8000180 <memchr>
 8009e58:	b108      	cbz	r0, 8009e5e <_printf_i+0x1f2>
 8009e5a:	1b40      	subs	r0, r0, r5
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	2300      	movs	r3, #0
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	e7a8      	b.n	8009dbc <_printf_i+0x150>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	47d0      	blx	sl
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ab      	beq.n	8009dd0 <_printf_i+0x164>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d413      	bmi.n	8009ea6 <_printf_i+0x23a>
 8009e7e:	68e0      	ldr	r0, [r4, #12]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bfb8      	it	lt
 8009e86:	4618      	movlt	r0, r3
 8009e88:	e7a4      	b.n	8009dd4 <_printf_i+0x168>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	47d0      	blx	sl
 8009e94:	3001      	adds	r0, #1
 8009e96:	d09b      	beq.n	8009dd0 <_printf_i+0x164>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dcf2      	bgt.n	8009e8a <_printf_i+0x21e>
 8009ea4:	e7eb      	b.n	8009e7e <_printf_i+0x212>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	f104 0619 	add.w	r6, r4, #25
 8009eac:	e7f5      	b.n	8009e9a <_printf_i+0x22e>
 8009eae:	bf00      	nop
 8009eb0:	0800a645 	.word	0x0800a645
 8009eb4:	0800a656 	.word	0x0800a656

08009eb8 <_sbrk_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d06      	ldr	r5, [pc, #24]	; (8009ed4 <_sbrk_r+0x1c>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f6 fc0a 	bl	80006dc <_sbrk>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_sbrk_r+0x1a>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_sbrk_r+0x1a>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20001be8 	.word	0x20001be8

08009ed8 <__sread>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	460c      	mov	r4, r1
 8009edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee0:	f000 fab2 	bl	800a448 <_read_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	bfab      	itete	ge
 8009ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eea:	89a3      	ldrhlt	r3, [r4, #12]
 8009eec:	181b      	addge	r3, r3, r0
 8009eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ef2:	bfac      	ite	ge
 8009ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ef6:	81a3      	strhlt	r3, [r4, #12]
 8009ef8:	bd10      	pop	{r4, pc}

08009efa <__swrite>:
 8009efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efe:	461f      	mov	r7, r3
 8009f00:	898b      	ldrh	r3, [r1, #12]
 8009f02:	05db      	lsls	r3, r3, #23
 8009f04:	4605      	mov	r5, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	4616      	mov	r6, r2
 8009f0a:	d505      	bpl.n	8009f18 <__swrite+0x1e>
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	2302      	movs	r3, #2
 8009f12:	2200      	movs	r2, #0
 8009f14:	f000 f9c8 	bl	800a2a8 <_lseek_r>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	4632      	mov	r2, r6
 8009f26:	463b      	mov	r3, r7
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	f000 b869 	b.w	800a004 <_write_r>

08009f32 <__sseek>:
 8009f32:	b510      	push	{r4, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3a:	f000 f9b5 	bl	800a2a8 <_lseek_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	bf15      	itete	ne
 8009f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f4e:	81a3      	strheq	r3, [r4, #12]
 8009f50:	bf18      	it	ne
 8009f52:	81a3      	strhne	r3, [r4, #12]
 8009f54:	bd10      	pop	{r4, pc}

08009f56 <__sclose>:
 8009f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5a:	f000 b8d3 	b.w	800a104 <_close_r>
	...

08009f60 <__swbuf_r>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	460e      	mov	r6, r1
 8009f64:	4614      	mov	r4, r2
 8009f66:	4605      	mov	r5, r0
 8009f68:	b118      	cbz	r0, 8009f72 <__swbuf_r+0x12>
 8009f6a:	6983      	ldr	r3, [r0, #24]
 8009f6c:	b90b      	cbnz	r3, 8009f72 <__swbuf_r+0x12>
 8009f6e:	f7ff fb81 	bl	8009674 <__sinit>
 8009f72:	4b21      	ldr	r3, [pc, #132]	; (8009ff8 <__swbuf_r+0x98>)
 8009f74:	429c      	cmp	r4, r3
 8009f76:	d12b      	bne.n	8009fd0 <__swbuf_r+0x70>
 8009f78:	686c      	ldr	r4, [r5, #4]
 8009f7a:	69a3      	ldr	r3, [r4, #24]
 8009f7c:	60a3      	str	r3, [r4, #8]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	071a      	lsls	r2, r3, #28
 8009f82:	d52f      	bpl.n	8009fe4 <__swbuf_r+0x84>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	b36b      	cbz	r3, 8009fe4 <__swbuf_r+0x84>
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	6820      	ldr	r0, [r4, #0]
 8009f8c:	1ac0      	subs	r0, r0, r3
 8009f8e:	6963      	ldr	r3, [r4, #20]
 8009f90:	b2f6      	uxtb	r6, r6
 8009f92:	4283      	cmp	r3, r0
 8009f94:	4637      	mov	r7, r6
 8009f96:	dc04      	bgt.n	8009fa2 <__swbuf_r+0x42>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 f948 	bl	800a230 <_fflush_r>
 8009fa0:	bb30      	cbnz	r0, 8009ff0 <__swbuf_r+0x90>
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	701e      	strb	r6, [r3, #0]
 8009fb0:	6963      	ldr	r3, [r4, #20]
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	4283      	cmp	r3, r0
 8009fb6:	d004      	beq.n	8009fc2 <__swbuf_r+0x62>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	07db      	lsls	r3, r3, #31
 8009fbc:	d506      	bpl.n	8009fcc <__swbuf_r+0x6c>
 8009fbe:	2e0a      	cmp	r6, #10
 8009fc0:	d104      	bne.n	8009fcc <__swbuf_r+0x6c>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f933 	bl	800a230 <_fflush_r>
 8009fca:	b988      	cbnz	r0, 8009ff0 <__swbuf_r+0x90>
 8009fcc:	4638      	mov	r0, r7
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <__swbuf_r+0x9c>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d101      	bne.n	8009fda <__swbuf_r+0x7a>
 8009fd6:	68ac      	ldr	r4, [r5, #8]
 8009fd8:	e7cf      	b.n	8009f7a <__swbuf_r+0x1a>
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <__swbuf_r+0xa0>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	bf08      	it	eq
 8009fe0:	68ec      	ldreq	r4, [r5, #12]
 8009fe2:	e7ca      	b.n	8009f7a <__swbuf_r+0x1a>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f81e 	bl	800a028 <__swsetup_r>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0cb      	beq.n	8009f88 <__swbuf_r+0x28>
 8009ff0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff4:	e7ea      	b.n	8009fcc <__swbuf_r+0x6c>
 8009ff6:	bf00      	nop
 8009ff8:	0800a5f4 	.word	0x0800a5f4
 8009ffc:	0800a614 	.word	0x0800a614
 800a000:	0800a5d4 	.word	0x0800a5d4

0800a004 <_write_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	; (800a024 <_write_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f6 fa01 	bl	800041a <_write>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_write_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_write_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	20001be8 	.word	0x20001be8

0800a028 <__swsetup_r>:
 800a028:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <__swsetup_r+0xcc>)
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	681d      	ldr	r5, [r3, #0]
 800a02e:	4606      	mov	r6, r0
 800a030:	460c      	mov	r4, r1
 800a032:	b125      	cbz	r5, 800a03e <__swsetup_r+0x16>
 800a034:	69ab      	ldr	r3, [r5, #24]
 800a036:	b913      	cbnz	r3, 800a03e <__swsetup_r+0x16>
 800a038:	4628      	mov	r0, r5
 800a03a:	f7ff fb1b 	bl	8009674 <__sinit>
 800a03e:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <__swsetup_r+0xd0>)
 800a040:	429c      	cmp	r4, r3
 800a042:	d10f      	bne.n	800a064 <__swsetup_r+0x3c>
 800a044:	686c      	ldr	r4, [r5, #4]
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a04c:	0719      	lsls	r1, r3, #28
 800a04e:	d42c      	bmi.n	800a0aa <__swsetup_r+0x82>
 800a050:	06dd      	lsls	r5, r3, #27
 800a052:	d411      	bmi.n	800a078 <__swsetup_r+0x50>
 800a054:	2309      	movs	r3, #9
 800a056:	6033      	str	r3, [r6, #0]
 800a058:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	f04f 30ff 	mov.w	r0, #4294967295
 800a062:	e03e      	b.n	800a0e2 <__swsetup_r+0xba>
 800a064:	4b25      	ldr	r3, [pc, #148]	; (800a0fc <__swsetup_r+0xd4>)
 800a066:	429c      	cmp	r4, r3
 800a068:	d101      	bne.n	800a06e <__swsetup_r+0x46>
 800a06a:	68ac      	ldr	r4, [r5, #8]
 800a06c:	e7eb      	b.n	800a046 <__swsetup_r+0x1e>
 800a06e:	4b24      	ldr	r3, [pc, #144]	; (800a100 <__swsetup_r+0xd8>)
 800a070:	429c      	cmp	r4, r3
 800a072:	bf08      	it	eq
 800a074:	68ec      	ldreq	r4, [r5, #12]
 800a076:	e7e6      	b.n	800a046 <__swsetup_r+0x1e>
 800a078:	0758      	lsls	r0, r3, #29
 800a07a:	d512      	bpl.n	800a0a2 <__swsetup_r+0x7a>
 800a07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07e:	b141      	cbz	r1, 800a092 <__swsetup_r+0x6a>
 800a080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a084:	4299      	cmp	r1, r3
 800a086:	d002      	beq.n	800a08e <__swsetup_r+0x66>
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f991 	bl	800a3b0 <_free_r>
 800a08e:	2300      	movs	r3, #0
 800a090:	6363      	str	r3, [r4, #52]	; 0x34
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	2300      	movs	r3, #0
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f043 0308 	orr.w	r3, r3, #8
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	b94b      	cbnz	r3, 800a0c2 <__swsetup_r+0x9a>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b8:	d003      	beq.n	800a0c2 <__swsetup_r+0x9a>
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f92b 	bl	800a318 <__smakebuf_r>
 800a0c2:	89a0      	ldrh	r0, [r4, #12]
 800a0c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c8:	f010 0301 	ands.w	r3, r0, #1
 800a0cc:	d00a      	beq.n	800a0e4 <__swsetup_r+0xbc>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60a3      	str	r3, [r4, #8]
 800a0d2:	6963      	ldr	r3, [r4, #20]
 800a0d4:	425b      	negs	r3, r3
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	b943      	cbnz	r3, 800a0ee <__swsetup_r+0xc6>
 800a0dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0e0:	d1ba      	bne.n	800a058 <__swsetup_r+0x30>
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	0781      	lsls	r1, r0, #30
 800a0e6:	bf58      	it	pl
 800a0e8:	6963      	ldrpl	r3, [r4, #20]
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	e7f4      	b.n	800a0d8 <__swsetup_r+0xb0>
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e7f7      	b.n	800a0e2 <__swsetup_r+0xba>
 800a0f2:	bf00      	nop
 800a0f4:	20000148 	.word	0x20000148
 800a0f8:	0800a5f4 	.word	0x0800a5f4
 800a0fc:	0800a614 	.word	0x0800a614
 800a100:	0800a5d4 	.word	0x0800a5d4

0800a104 <_close_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_close_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f6 faaf 	bl	8000672 <_close>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_close_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_close_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20001be8 	.word	0x20001be8

0800a124 <__sflush_r>:
 800a124:	898a      	ldrh	r2, [r1, #12]
 800a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	4605      	mov	r5, r0
 800a12c:	0710      	lsls	r0, r2, #28
 800a12e:	460c      	mov	r4, r1
 800a130:	d458      	bmi.n	800a1e4 <__sflush_r+0xc0>
 800a132:	684b      	ldr	r3, [r1, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	dc05      	bgt.n	800a144 <__sflush_r+0x20>
 800a138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dc02      	bgt.n	800a144 <__sflush_r+0x20>
 800a13e:	2000      	movs	r0, #0
 800a140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a146:	2e00      	cmp	r6, #0
 800a148:	d0f9      	beq.n	800a13e <__sflush_r+0x1a>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a150:	682f      	ldr	r7, [r5, #0]
 800a152:	602b      	str	r3, [r5, #0]
 800a154:	d032      	beq.n	800a1bc <__sflush_r+0x98>
 800a156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	075a      	lsls	r2, r3, #29
 800a15c:	d505      	bpl.n	800a16a <__sflush_r+0x46>
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	1ac0      	subs	r0, r0, r3
 800a162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a164:	b10b      	cbz	r3, 800a16a <__sflush_r+0x46>
 800a166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a168:	1ac0      	subs	r0, r0, r3
 800a16a:	2300      	movs	r3, #0
 800a16c:	4602      	mov	r2, r0
 800a16e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a170:	6a21      	ldr	r1, [r4, #32]
 800a172:	4628      	mov	r0, r5
 800a174:	47b0      	blx	r6
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	d106      	bne.n	800a18a <__sflush_r+0x66>
 800a17c:	6829      	ldr	r1, [r5, #0]
 800a17e:	291d      	cmp	r1, #29
 800a180:	d82c      	bhi.n	800a1dc <__sflush_r+0xb8>
 800a182:	4a2a      	ldr	r2, [pc, #168]	; (800a22c <__sflush_r+0x108>)
 800a184:	40ca      	lsrs	r2, r1
 800a186:	07d6      	lsls	r6, r2, #31
 800a188:	d528      	bpl.n	800a1dc <__sflush_r+0xb8>
 800a18a:	2200      	movs	r2, #0
 800a18c:	6062      	str	r2, [r4, #4]
 800a18e:	04d9      	lsls	r1, r3, #19
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	6022      	str	r2, [r4, #0]
 800a194:	d504      	bpl.n	800a1a0 <__sflush_r+0x7c>
 800a196:	1c42      	adds	r2, r0, #1
 800a198:	d101      	bne.n	800a19e <__sflush_r+0x7a>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b903      	cbnz	r3, 800a1a0 <__sflush_r+0x7c>
 800a19e:	6560      	str	r0, [r4, #84]	; 0x54
 800a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a2:	602f      	str	r7, [r5, #0]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	d0ca      	beq.n	800a13e <__sflush_r+0x1a>
 800a1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1ac:	4299      	cmp	r1, r3
 800a1ae:	d002      	beq.n	800a1b6 <__sflush_r+0x92>
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 f8fd 	bl	800a3b0 <_free_r>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ba:	e7c1      	b.n	800a140 <__sflush_r+0x1c>
 800a1bc:	6a21      	ldr	r1, [r4, #32]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b0      	blx	r6
 800a1c4:	1c41      	adds	r1, r0, #1
 800a1c6:	d1c7      	bne.n	800a158 <__sflush_r+0x34>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c4      	beq.n	800a158 <__sflush_r+0x34>
 800a1ce:	2b1d      	cmp	r3, #29
 800a1d0:	d001      	beq.n	800a1d6 <__sflush_r+0xb2>
 800a1d2:	2b16      	cmp	r3, #22
 800a1d4:	d101      	bne.n	800a1da <__sflush_r+0xb6>
 800a1d6:	602f      	str	r7, [r5, #0]
 800a1d8:	e7b1      	b.n	800a13e <__sflush_r+0x1a>
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	e7ad      	b.n	800a140 <__sflush_r+0x1c>
 800a1e4:	690f      	ldr	r7, [r1, #16]
 800a1e6:	2f00      	cmp	r7, #0
 800a1e8:	d0a9      	beq.n	800a13e <__sflush_r+0x1a>
 800a1ea:	0793      	lsls	r3, r2, #30
 800a1ec:	680e      	ldr	r6, [r1, #0]
 800a1ee:	bf08      	it	eq
 800a1f0:	694b      	ldreq	r3, [r1, #20]
 800a1f2:	600f      	str	r7, [r1, #0]
 800a1f4:	bf18      	it	ne
 800a1f6:	2300      	movne	r3, #0
 800a1f8:	eba6 0807 	sub.w	r8, r6, r7
 800a1fc:	608b      	str	r3, [r1, #8]
 800a1fe:	f1b8 0f00 	cmp.w	r8, #0
 800a202:	dd9c      	ble.n	800a13e <__sflush_r+0x1a>
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a208:	4643      	mov	r3, r8
 800a20a:	463a      	mov	r2, r7
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b0      	blx	r6
 800a210:	2800      	cmp	r0, #0
 800a212:	dc06      	bgt.n	800a222 <__sflush_r+0xfe>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e78e      	b.n	800a140 <__sflush_r+0x1c>
 800a222:	4407      	add	r7, r0
 800a224:	eba8 0800 	sub.w	r8, r8, r0
 800a228:	e7e9      	b.n	800a1fe <__sflush_r+0xda>
 800a22a:	bf00      	nop
 800a22c:	20400001 	.word	0x20400001

0800a230 <_fflush_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b913      	cbnz	r3, 800a240 <_fflush_r+0x10>
 800a23a:	2500      	movs	r5, #0
 800a23c:	4628      	mov	r0, r5
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	b118      	cbz	r0, 800a24a <_fflush_r+0x1a>
 800a242:	6983      	ldr	r3, [r0, #24]
 800a244:	b90b      	cbnz	r3, 800a24a <_fflush_r+0x1a>
 800a246:	f7ff fa15 	bl	8009674 <__sinit>
 800a24a:	4b14      	ldr	r3, [pc, #80]	; (800a29c <_fflush_r+0x6c>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d11b      	bne.n	800a288 <_fflush_r+0x58>
 800a250:	686c      	ldr	r4, [r5, #4]
 800a252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0ef      	beq.n	800a23a <_fflush_r+0xa>
 800a25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a25c:	07d0      	lsls	r0, r2, #31
 800a25e:	d404      	bmi.n	800a26a <_fflush_r+0x3a>
 800a260:	0599      	lsls	r1, r3, #22
 800a262:	d402      	bmi.n	800a26a <_fflush_r+0x3a>
 800a264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a266:	f7ff faa3 	bl	80097b0 <__retarget_lock_acquire_recursive>
 800a26a:	4628      	mov	r0, r5
 800a26c:	4621      	mov	r1, r4
 800a26e:	f7ff ff59 	bl	800a124 <__sflush_r>
 800a272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a274:	07da      	lsls	r2, r3, #31
 800a276:	4605      	mov	r5, r0
 800a278:	d4e0      	bmi.n	800a23c <_fflush_r+0xc>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	059b      	lsls	r3, r3, #22
 800a27e:	d4dd      	bmi.n	800a23c <_fflush_r+0xc>
 800a280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a282:	f7ff fa96 	bl	80097b2 <__retarget_lock_release_recursive>
 800a286:	e7d9      	b.n	800a23c <_fflush_r+0xc>
 800a288:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <_fflush_r+0x70>)
 800a28a:	429c      	cmp	r4, r3
 800a28c:	d101      	bne.n	800a292 <_fflush_r+0x62>
 800a28e:	68ac      	ldr	r4, [r5, #8]
 800a290:	e7df      	b.n	800a252 <_fflush_r+0x22>
 800a292:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <_fflush_r+0x74>)
 800a294:	429c      	cmp	r4, r3
 800a296:	bf08      	it	eq
 800a298:	68ec      	ldreq	r4, [r5, #12]
 800a29a:	e7da      	b.n	800a252 <_fflush_r+0x22>
 800a29c:	0800a5f4 	.word	0x0800a5f4
 800a2a0:	0800a614 	.word	0x0800a614
 800a2a4:	0800a5d4 	.word	0x0800a5d4

0800a2a8 <_lseek_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_lseek_r+0x20>)
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f6 fa02 	bl	80006c0 <_lseek>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_lseek_r+0x1e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_lseek_r+0x1e>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20001be8 	.word	0x20001be8

0800a2cc <__swhatbuf_r>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	460e      	mov	r6, r1
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	b096      	sub	sp, #88	; 0x58
 800a2d8:	4614      	mov	r4, r2
 800a2da:	461d      	mov	r5, r3
 800a2dc:	da08      	bge.n	800a2f0 <__swhatbuf_r+0x24>
 800a2de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	061a      	lsls	r2, r3, #24
 800a2e8:	d410      	bmi.n	800a30c <__swhatbuf_r+0x40>
 800a2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ee:	e00e      	b.n	800a30e <__swhatbuf_r+0x42>
 800a2f0:	466a      	mov	r2, sp
 800a2f2:	f000 f8bb 	bl	800a46c <_fstat_r>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	dbf1      	blt.n	800a2de <__swhatbuf_r+0x12>
 800a2fa:	9a01      	ldr	r2, [sp, #4]
 800a2fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a304:	425a      	negs	r2, r3
 800a306:	415a      	adcs	r2, r3
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	e7ee      	b.n	800a2ea <__swhatbuf_r+0x1e>
 800a30c:	2340      	movs	r3, #64	; 0x40
 800a30e:	2000      	movs	r0, #0
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	b016      	add	sp, #88	; 0x58
 800a314:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a318 <__smakebuf_r>:
 800a318:	898b      	ldrh	r3, [r1, #12]
 800a31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a31c:	079d      	lsls	r5, r3, #30
 800a31e:	4606      	mov	r6, r0
 800a320:	460c      	mov	r4, r1
 800a322:	d507      	bpl.n	800a334 <__smakebuf_r+0x1c>
 800a324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	6123      	str	r3, [r4, #16]
 800a32c:	2301      	movs	r3, #1
 800a32e:	6163      	str	r3, [r4, #20]
 800a330:	b002      	add	sp, #8
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	ab01      	add	r3, sp, #4
 800a336:	466a      	mov	r2, sp
 800a338:	f7ff ffc8 	bl	800a2cc <__swhatbuf_r>
 800a33c:	9900      	ldr	r1, [sp, #0]
 800a33e:	4605      	mov	r5, r0
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff fa57 	bl	80097f4 <_malloc_r>
 800a346:	b948      	cbnz	r0, 800a35c <__smakebuf_r+0x44>
 800a348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34c:	059a      	lsls	r2, r3, #22
 800a34e:	d4ef      	bmi.n	800a330 <__smakebuf_r+0x18>
 800a350:	f023 0303 	bic.w	r3, r3, #3
 800a354:	f043 0302 	orr.w	r3, r3, #2
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	e7e3      	b.n	800a324 <__smakebuf_r+0xc>
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <__smakebuf_r+0x7c>)
 800a35e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	6020      	str	r0, [r4, #0]
 800a364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	6163      	str	r3, [r4, #20]
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	6120      	str	r0, [r4, #16]
 800a372:	b15b      	cbz	r3, 800a38c <__smakebuf_r+0x74>
 800a374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f889 	bl	800a490 <_isatty_r>
 800a37e:	b128      	cbz	r0, 800a38c <__smakebuf_r+0x74>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	f023 0303 	bic.w	r3, r3, #3
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	89a0      	ldrh	r0, [r4, #12]
 800a38e:	4305      	orrs	r5, r0
 800a390:	81a5      	strh	r5, [r4, #12]
 800a392:	e7cd      	b.n	800a330 <__smakebuf_r+0x18>
 800a394:	0800960d 	.word	0x0800960d

0800a398 <__malloc_lock>:
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <__malloc_lock+0x8>)
 800a39a:	f7ff ba09 	b.w	80097b0 <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	20001bdc 	.word	0x20001bdc

0800a3a4 <__malloc_unlock>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__malloc_unlock+0x8>)
 800a3a6:	f7ff ba04 	b.w	80097b2 <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	20001bdc 	.word	0x20001bdc

0800a3b0 <_free_r>:
 800a3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	d044      	beq.n	800a440 <_free_r+0x90>
 800a3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ba:	9001      	str	r0, [sp, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f1a1 0404 	sub.w	r4, r1, #4
 800a3c2:	bfb8      	it	lt
 800a3c4:	18e4      	addlt	r4, r4, r3
 800a3c6:	f7ff ffe7 	bl	800a398 <__malloc_lock>
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	; (800a444 <_free_r+0x94>)
 800a3cc:	9801      	ldr	r0, [sp, #4]
 800a3ce:	6813      	ldr	r3, [r2, #0]
 800a3d0:	b933      	cbnz	r3, 800a3e0 <_free_r+0x30>
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	6014      	str	r4, [r2, #0]
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3dc:	f7ff bfe2 	b.w	800a3a4 <__malloc_unlock>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d908      	bls.n	800a3f6 <_free_r+0x46>
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	1961      	adds	r1, r4, r5
 800a3e8:	428b      	cmp	r3, r1
 800a3ea:	bf01      	itttt	eq
 800a3ec:	6819      	ldreq	r1, [r3, #0]
 800a3ee:	685b      	ldreq	r3, [r3, #4]
 800a3f0:	1949      	addeq	r1, r1, r5
 800a3f2:	6021      	streq	r1, [r4, #0]
 800a3f4:	e7ed      	b.n	800a3d2 <_free_r+0x22>
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	b10b      	cbz	r3, 800a400 <_free_r+0x50>
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	d9fa      	bls.n	800a3f6 <_free_r+0x46>
 800a400:	6811      	ldr	r1, [r2, #0]
 800a402:	1855      	adds	r5, r2, r1
 800a404:	42a5      	cmp	r5, r4
 800a406:	d10b      	bne.n	800a420 <_free_r+0x70>
 800a408:	6824      	ldr	r4, [r4, #0]
 800a40a:	4421      	add	r1, r4
 800a40c:	1854      	adds	r4, r2, r1
 800a40e:	42a3      	cmp	r3, r4
 800a410:	6011      	str	r1, [r2, #0]
 800a412:	d1e0      	bne.n	800a3d6 <_free_r+0x26>
 800a414:	681c      	ldr	r4, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	6053      	str	r3, [r2, #4]
 800a41a:	4421      	add	r1, r4
 800a41c:	6011      	str	r1, [r2, #0]
 800a41e:	e7da      	b.n	800a3d6 <_free_r+0x26>
 800a420:	d902      	bls.n	800a428 <_free_r+0x78>
 800a422:	230c      	movs	r3, #12
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	e7d6      	b.n	800a3d6 <_free_r+0x26>
 800a428:	6825      	ldr	r5, [r4, #0]
 800a42a:	1961      	adds	r1, r4, r5
 800a42c:	428b      	cmp	r3, r1
 800a42e:	bf04      	itt	eq
 800a430:	6819      	ldreq	r1, [r3, #0]
 800a432:	685b      	ldreq	r3, [r3, #4]
 800a434:	6063      	str	r3, [r4, #4]
 800a436:	bf04      	itt	eq
 800a438:	1949      	addeq	r1, r1, r5
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	6054      	str	r4, [r2, #4]
 800a43e:	e7ca      	b.n	800a3d6 <_free_r+0x26>
 800a440:	b003      	add	sp, #12
 800a442:	bd30      	pop	{r4, r5, pc}
 800a444:	20001be0 	.word	0x20001be0

0800a448 <_read_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	; (800a468 <_read_r+0x20>)
 800a44c:	4604      	mov	r4, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f6 f8ee 	bl	8000638 <_read>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_read_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_read_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20001be8 	.word	0x20001be8

0800a46c <_fstat_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_fstat_r+0x20>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f6 f906 	bl	800068a <_fstat>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_fstat_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_fstat_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20001be8 	.word	0x20001be8

0800a490 <_isatty_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d06      	ldr	r5, [pc, #24]	; (800a4ac <_isatty_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7f6 f905 	bl	80006aa <_isatty>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_isatty_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_isatty_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20001be8 	.word	0x20001be8

0800a4b0 <_init>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr

0800a4bc <_fini>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	bf00      	nop
 800a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c2:	bc08      	pop	{r3}
 800a4c4:	469e      	mov	lr, r3
 800a4c6:	4770      	bx	lr
